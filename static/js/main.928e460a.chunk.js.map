{"version":3,"sources":["helpers/storage.js","api/auth.js","api/issues.js","api/owners.js","api/repositories.js","api/assignees.js","api/labels.js","api/milestones.js","components/button.jsx","components/form.jsx","components/navbar.jsx","components/page-welcome.jsx","components/form-issue.jsx","components/tab-single-issue.jsx","components/issue-list.jsx","components/tab-multiple-issue.jsx","components/tab-existing-issue.jsx","components/sidebar.jsx","components/page-dashboard.jsx","App.jsx","index.js"],"names":["window","CustomEvent","event","params","eventParams","assign","bubbles","cancelable","detail","evt","document","createEvent","initCustomEvent","keyDataGenerator","baseKey","data","dataProperty","arguments","length","undefined","isUndefined","concat","isObject","map","property","get","join","dispatchStorageChangeEvent","eventDetail","storageChangeEvent","dispatchEvent","setData","key","value","eventData","store","set","action","Object","defineProperty","removeData","isArray","forEach","removeKey","remove","keys","clearData","clear","getData","getAuthentication","keyDataOwner","owner","keyDataRepository","repository","keyDataImportedIssue","issue","getDataImportedIssues","filter","indexOf","keyDataAssignee","assignee","keyDataLabel","label","setDataLabels","labels","entity","keyDataMilestone","milestone","setDataMilestones","milestones","keyAlert","name","getAlertMessage","alert","has","response","message","JSON","stringify","errors","toString","populateAlertData","variant","id","alertDefault","linkUrl","linkAnchor","isString","setAlert","setAlertSuccess","alerts","index","setAlertError","keyLoadingState","isLoading","startLoading","stopLoading","getDataFetchedStatus","group","setDataFetchedStatus","status","axios","defaults","baseURL","apiAuth","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","accessToken","cancelToken","wrap","_context","prev","next","Error","headers","Content-Type","Authorization","url","method","sent","abrupt","stop","_x","_x2","apply","this","apiSearchIssues","requestParams","objectSpread","page","per_page","apiCreateIssues","_ref2","_callee2","issueData","issues","promises","_context2","push","Array","title","body","all","_x3","_x4","_x5","apiUpdateIssues","_ref3","_callee3","_context3","number","_x6","_x7","_x8","apiFetchOwners","fetchData","records","currentPage","keepGoing","payload","toConsumableArray","item","type","apiFetchRepsitories","org","q","login","items","total_count","apiFetchAssignees","apiFetchLabels","repositoryName","results","full_name","apiCreateLabels","labelData","responses","apiFetchMilestones","repo","apiCreateMilestones","milestoneData","BGICButton","buttonProps","omit","props","react_default","createElement","Button","disabled","Spinner","as","animation","size","role","aria-hidden","buttonText","Fragment","renderButton","PureComponent","defaultProps","onClick","noop","BGICForm","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","validated","clickedButton","onStorageChange","bind","assertThisInitialized","onFormReset","onFormSubmit","addEventListener","removeEventListener","eventEntity","getAlert","isEqual","setState","loading","_this2","preventDefault","clearAlerts","then","isFunction","_this3","stopPropagation","currentTarget","checkValidity","Promise","resolve","clearAlert","setTimeout","_this4","isEmpty","groupBy","Alert","onClose","closeAlerts","dismissible","reactStringReplace","Link","href","target","className","messages","formTitle","Breadcrumb","Item","active","_this$props","buttonSize","buttonBlock","buttonReset","buttonResetDisabled","buttonResetText","buttonSubmit","buttonSubmitDisabled","buttonSubmitText","buttons","block","button","components_button","Form","noValidate","onReset","onSubmit","renderFormTitle","renderAlert","children","renderButtons","repoUrl","BGICNavbar","_isMounted","showLoginModal","showLogoutModal","onChangeAccessToken","onUserLogin","onUserLogout","toggleLoginModal","toggleLogoutModal","currentUser","catch","error","finally","_this$props2","Nav","Navbar","Collapse","NavDropdown","Modal","backdrop","onHide","show","centered","Header","closeButton","Title","Body","components_form","Group","Label","Control","placeholder","onChange","required","rel","Footer","collapseOnSelect","expand","bg","Container","Brand","Toggle","aria-controls","renderUserMenu","renderLoginModal","renderLogoutModal","BGICPageWelcome","youtubeId","Row","Col","md","style","position","paddingBottom","paddingTop","height","top","left","width","src","frameBorder","allowFullScreen","BGICFormIssue","activeTab","onSelectTab","onChangeIssueTitle","onChangeIssueBody","nextProps","issueBody","trim","issueTitle","Tabs","defaultActiveKey","onSelect","Tab","eventKey","rows","index_es","icon","faMarkdown","react_markdown_default","source","BGICTabSingleIssue","editingIssueTitle","editingIssueBody","repositorySelected","assigneesSelected","labelsSelected","milestonesSelected","_this$state","assignees","html_url","form_issue","BGICIssueList","isTypingKeyword","filterParams","onChangeFilterParams","onChangeFilterParamsDebounced","debounce","cancel","dropdownsOutput","defaultValue","dropdown","activeItem","activeItemValue","activeItemLabel","DropdownButton","InputGroup","Prepend","Dropdown","keywordOutput","FormControl","aria-label","onFocus","onBlur","totalPages","rangeLeft","rangeRight","pages","pagesAll","nextIndex","pageKey","pagePrev","parseInt","pageNext","Pagination","Ellipsis","Prev","onChangePagination","Next","buttonActionHandler","isButtonDisabled","buttonActionUrl","toLowerCase","buttonActionText","buttonOutput","OverlayTrigger","placement","overlay","Tooltip","columnActions","faEdit","faTrash","faLink","renderActionButton","columnActionsCount","columnWidth","ButtonGroup","_this5","isFetchingData","LoadingOverlay_default","text","spinner","Table","striped","bordered","hover","textContent","actionColumnOutput","renderActionColumn","itemsOutput","renderPagination","renderFilterBar","renderTable","buttonEditVisible","buttonEditDisabled","buttonEditHandler","buttonDelete","buttonDeleteDisabled","buttonDeleteHandler","buttonViewVisible","buttonViewDisabled","buttonViewHandler","BGICTabMultipleIssue","editingIssue","importMethod","dataType","importedText","dataSeparator","onClickIssueEdit","onClickIssueDelete","onChangeDataType","onChangeDataSeparator","onChangeImportMethod","onChangeUpload","onChangePaste","onParseImportedText","onDownloadSample","removeDataImportedIssue","files","fileReader","FileReader","onloadend","result","readAsText","_this$state2","parse","uniqueId","s","sep","split","i","tl","f","x","replace","charAt","splice","shift","CSVParse","setDataImportedIssues","sampleMIME","sampleName","hiddenElement","display","encodeURI","generateSample","download","appendChild","click","removeChild","_this$state3","sampleLines","_this$state4","_this$state5","formProps","formContentOutput","issue_list","buttonDeleteVisible","column","sm","Check","checked","inline","separator","accept","toUpperCase","renderFormEdit","renderFormImport","BGICTabExistingIssue","resetProps","ownerSelected","fetchIssuesAfterEdit","searchIssuesSort","searchIssuesStatus","searchIssuesKeyword","onChangeFilter","fetchIssues","prevProps","prevState","compares","editingIssueId","editingIssueIdPrev","pick","onChangeOwner","onChangeRepository","onChangeAssignees","onChangeLabels","onChangeMilestones","issueDataNew","issueDataOld","_this$fetchIssues","getFetchIssuesQuery","newState","linkHeader","parseLinkHeader","link","last","_this$props3","queries","query","_this$props4","renderIssuesList","BGICSidebar","ownersListLodingState","repositoriesListLodingState","assigneesListLodingState","labelsListLodingState","onFocusOwnersList","onFocusRepositoriesList","onFocusAssigneesList","onFocusLabelsList","onFocusMilestonesList","onChangeOwnersList","onChangeRepositoriesList","onChangeAssigneesList","onChangeLabelsList","onChangeMilestonesList","owners","setDataOwners","repositories","setDataRepositories","setDataAssignees","_this6","newValue","_this$props5","_this$props6","_this$props7","_this7","_this$props8","newLabels","__isNew__","_this8","_this$props9","_this$props10","options","sortBy","getDataOwners","getDataRepositories","getDataAssignees","user","getDataLabels","getDataMilestones","react_select_browser_esm","getOptions","getOptionLabel","option","getOptionValue","isSearchable","isClearable","_this$props11","_this$props12","isMulti","_this$props13","dist_react_select_browser_esm","getNewOptionData","inputValue","formatCreateLabel","isValidNewOption","_this$props14","renderOwnersList","renderRepositoriesList","renderAssigneesList","renderLabelsList","renderMilestonesList","BGICPageUserDashboard","isNull","sidebar","tabProps","tabs","content","tab","React","tabKey","activeTabKey","xs","renderContent","renderSideBar","App","authentication","setAuthentication","navbar","page_welcome","page_dashboard","renderNavbar","renderPageWelcome","renderPageDashboard","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.928e460a.chunk.js","sourcesContent":["import store from 'storejs';\n\nimport {\n    assign,\n    concat,\n    forEach,\n    get,\n    has,\n    isArray,\n    isObject,\n    isUndefined,\n    keys,\n    sortBy,\n    isString,\n} from 'lodash';\n\n/**\n * The CustomEvent interface polyfill\n */\n(() => {\n    if (typeof window.CustomEvent === \"function\") {\n        return false;\n    }\n\n    function CustomEvent(event, params) {\n        const eventParams = assign({}, {\n            bubbles: false,\n            cancelable: false,\n            detail: null\n        }, params);\n\n        var evt = document.createEvent('CustomEvent');\n\n        evt.initCustomEvent(event, eventParams.bubbles, eventParams.cancelable, eventParams.detail);\n\n        return evt;\n    }\n\n    window.CustomEvent = CustomEvent;\n})();\n\n/**\n * Generate dot concated data key\n * \n * @param {string} baseKey \n * @param {object} data \n * @param {array} dataProperty\n * \n * @return {string}\n */\nconst keyDataGenerator = (baseKey, data, dataProperty = ['id']) => {\n    if (isUndefined(data)) {\n        return `${baseKey}`;\n    }\n\n    if (!isObject(data)) {\n        return `${baseKey}.${data}`;\n    }\n\n    return `${concat([baseKey], dataProperty.map(property => get(data, property, ''))).join('.')}`;\n}\n\nconst dispatchStorageChangeEvent = (eventDetail) => {\n    const storageChangeEvent = new CustomEvent('storageChange', {\n        detail: eventDetail,\n    });\n\n    window.dispatchEvent(storageChangeEvent);\n};\n\nexport const setData = (key, value, eventData) => {\n    if (isObject(key)) {\n        store.set(key);\n\n        dispatchStorageChangeEvent(assign({}, {\n            action: 'setData',\n            data: key,\n        }, eventData));\n    } else {\n        store.set(key, value);\n\n        dispatchStorageChangeEvent(assign({}, {\n            action: 'setData',\n            data: {\n                [key]: value,\n            }\n        }, eventData));\n    }\n};\n\nexport const removeData = (key, eventData) => {\n    if (isArray(key)) {\n        forEach(key, removeKey => {\n            store.remove(removeKey);\n        });\n    } else if (isObject(key)) {\n        forEach(keys(key), removeKey => {\n            store.remove(removeKey);\n        });\n    } else {\n        store.remove(key);\n    }\n\n    dispatchStorageChangeEvent(assign({}, {\n        action: 'removeData',\n        data: key,\n    }, eventData));\n};\n\nexport const clearData = (eventData) => {\n    store.clear();\n\n    dispatchStorageChangeEvent(assign({}, {\n        action: 'clearData',\n    }, eventData));\n};\n\n\nexport const getData = (keys) => isArray(keys) ? keys.map(key => store.get(key)) : store.get(keys);\n\n/**\n * Authentication Data Helpers\n */\nexport const setAuthentication = (accessToken, currentUser) => setData('authentication', { accessToken, currentUser }, {\n    entity: 'authentication',\n    method: 'set',\n});\n\nexport const removeAuthentication = () => removeData('authentication', {\n    entity: 'authentication',\n    method: 'remove',\n});\n\nexport const getAuthentication = () => getData('authentication');\n\n/**\n * Owner Data Helpers\n */\nexport const keyDataOwner = (owner) => {\n    return keyDataGenerator('owner', owner);\n};\n\n\nexport const getDataOwners = () => {\n    const owners = getData(store.keys().filter(key => key.indexOf(keyDataOwner('')) === 0));\n\n    return sortBy(owners, ['login']);\n};\n\nexport const setDataOwners = (owners) => {\n    const data = {};\n\n    forEach(owners, (owner) => {\n        data[keyDataOwner(owner)] = owner;\n    });\n\n    setData(data, undefined, {\n        entity: 'owner',\n    });\n};\n\n/**\n * Repository Data Helpers\n */\nexport const keyDataRepository = (repository) => {\n    return keyDataGenerator('repository', repository);\n};\n\nexport const getDataRepositories = (owner) => {\n    const items = getData(store.keys().filter(key => key.indexOf(keyDataRepository('')) === 0));\n\n    if (owner) {\n        return sortBy(items.filter(item => item.owner.login === owner), ['name']);\n    }\n\n    return sortBy(items, ['name']);\n};\n\nexport const setDataRepositories = (repositories) => {\n    const data = {};\n\n    forEach(repositories, (repository) => {\n        data[keyDataRepository(repository)] = repository;\n    });\n\n    setData(data, undefined, {\n        entity: 'repository',\n    });\n};\n\n/**\n * Imported Issue Data Helpers\n */\nexport const keyDataImportedIssue = (issue) => {\n    return keyDataGenerator('issue_imported', issue);\n};\n\nexport const getDataImportedIssue = (issue) => getData(keyDataImportedIssue(issue));\n\nexport const getDataImportedIssues = () => getData(store.keys().filter(key => key.indexOf(keyDataImportedIssue('')) === 0));\n\nexport const removeDataImportedIssue = (issue) => removeData(keyDataImportedIssue(issue), {\n    entity: 'issue_imported',\n});\n\nexport const removeDataImportedIssues = () => removeData(store.keys().filter(key => key.indexOf(keyDataImportedIssue('')) === 0), {\n    entity: 'issue_imported',\n});\n\nexport const setDataImportedIssue = (issue) => setData(keyDataImportedIssue(issue), issue, {\n    entity: 'issue_imported',\n});\n\nexport const setDataImportedIssues = (issues) => {\n    const data = {};\n\n    forEach(issues, (issue) => {\n        data[keyDataImportedIssue(issue)] = issue;\n    });\n\n    setData(data, undefined, {\n        entity: 'issue_imported',\n    });\n};\n\n/**\n * Created Issue Data Helpers\n */\nexport const keyDataCreatedIssue = (issue) => {\n    return keyDataGenerator('issue_created', issue);\n};\n\n\n/**\n * Assignee Data Helpers\n */\nexport const keyDataAssignee = (assignee) => {\n    return keyDataGenerator('assignee', assignee, ['org', 'id']);\n};\n\nexport const getDataAssignees = (org) => {\n    const items = getData(store.keys().filter(key => key.indexOf(keyDataAssignee('')) === 0));\n\n    if (org) {\n        return sortBy(items.filter(item => item.org === org), ['login']);\n    }\n\n    return sortBy(items, ['login']);\n};\n\nexport const setDataAssignees = (assignees) => {\n    const data = {};\n\n    forEach(assignees, (assignee) => {\n        data[keyDataAssignee(assignee)] = assignee;\n    });\n\n    setData(data, undefined, {\n        entity: 'assignee',\n    });\n};\n\n/**\n * Label Data Helpers\n */\nexport const keyDataLabel = (label) => {\n    return keyDataGenerator('label', label);\n};\n\nexport const getDataLabels = (repo) => {\n    const items = getData(store.keys().filter(key => key.indexOf(keyDataLabel('')) === 0));\n\n    if (repo) {\n        return sortBy(items.filter(item => item.url.indexOf(repo) !== -1), ['name']);\n    }\n\n    return sortBy(items, ['name']);\n};\n\nexport const setDataLabels = (labels) => {\n    const data = {};\n\n    forEach(labels, (label) => {\n        data[keyDataLabel(label)] = label;\n    });\n\n    setData(data, undefined, {\n        entity: 'label',\n    });\n};\n\n/**\n * Milestone Data Helpers\n */\nexport const keyDataMilestone = (milestone) => {\n    return keyDataGenerator('milestone', milestone);\n};\n\nexport const getDataMilestones = (repo) => {\n    const items = getData(store.keys().filter(key => key.indexOf(keyDataMilestone('')) === 0));\n\n    if (repo) {\n        return sortBy(items.filter(item => item.url.indexOf(repo) !== -1), ['title']);\n    }\n\n    return sortBy(items, ['title']);\n};\n\nexport const setDataMilestones = (milestones) => {\n    const data = {};\n\n    forEach(milestones, (milestone) => {\n        data[keyDataMilestone(milestone)] = milestone;\n    });\n\n    setData(data, undefined, {\n        entity: 'milestone',\n    });\n};\n\n/**\n * Alert Data Helpers\n */\nconst keyAlert = (name) => {\n    return keyDataGenerator('alert', name);\n};\n\nconst getAlertMessage = (alert) => {\n    if (has(alert, 'response.data.message') && has(alert, 'response.data.errors')) {\n        return `${alert.response.data.message}: ${JSON.stringify(alert.response.data.errors)}`;\n    } else if (has(alert, 'response.data.message')) {\n        return alert.response.data.message;\n    } else if (has(alert, 'response.message')) {\n        return alert.response.message;\n    } else if (has(alert, 'message')) {\n        return alert.message;\n    } else {\n        return alert.toString();\n    }\n};\n\nconst populateAlertData = (variant, id, alert, name = 'form') => {\n    const alertDefault = {\n        variant,\n        id,\n        name,\n        linkUrl: false,\n        linkAnchor: false,\n        message: getAlertMessage(alert),\n    };\n\n    if (isString(alert)) {\n        return alertDefault;\n    };\n\n    return assign({}, alertDefault, alert);\n};\n\nexport const setAlert = (alert, name = 'form') => setData(keyAlert(name), alert, {\n    entity: 'alert',\n});\n\nexport const setAlertSuccess = (alert, name = 'form') => {\n    const alerts = isArray(alert) ? alert : [alert];\n\n    setAlert(alerts.map((alert, index) => populateAlertData('info', index, alert, name)), name);\n};\n\nexport const setAlertError = (alert, name = 'form') => {\n    const alerts = isArray(alert) ? alert : [alert];\n\n    setAlert(alerts.map((alert, index) => populateAlertData('danger', index, alert, name)), name);\n};\n\nexport const getAlert = (name = 'form') => {\n    return getData(keyAlert(name));\n};\n\nexport const clearAlert = (name = 'form') => removeData(keyAlert(name), {\n    entity: 'alert',\n});\n\n/**\n * Loading State Data Helpers\n */\nconst keyLoadingState = (name) => {\n    return keyDataGenerator('loadingState', name);\n};\n\nexport const isLoading = (name = 'form') => {\n    return getData(keyLoadingState(name));\n};\n\nexport const startLoading = (name = 'form') => setData(keyLoadingState(name), true, {\n    entity: 'loadingState',\n});\n\nexport const stopLoading = (name = 'form') => setData(keyLoadingState(name), false, {\n    entity: 'loadingState',\n});\n\nexport const getDataFetchedStatus = (group) => getData(keyDataGenerator('dataFetched', group));\n\nexport const setDataFetchedStatus = (group, status) => setData(keyDataGenerator('dataFetched', group), status);","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.github.com';\n\nexport const apiAuth = async (accessToken, cancelToken) => {\n    if (!accessToken) {\n        throw new Error('Access token cannot be empty');\n    }\n\n    const response = await axios({\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `token ${accessToken}`,\n        },\n        cancelToken: cancelToken,\n        url: '/user',\n        method: 'GET',\n    });\n\n    return response;\n};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.github.com';\n\nexport const apiSearchIssues = async (requestParams, accessToken) => {\n    const params = {\n        page: 1,\n        per_page: 10,\n        ...requestParams,\n    };\n\n    const response = await axios({\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `token ${accessToken}`,\n        },\n        method: 'GET',\n        url: '/search/issues',\n        params,\n    });\n\n    return response;\n};\n\nexport const apiCreateIssues = async (issueData, repository, accessToken) => {\n    const errors = [];\n\n    if (!repository) {\n        errors.push('Repository must not be empty');\n    }\n\n    const issues = Array.isArray(issueData) ? issueData : [issueData];\n\n    if (!issues.length) {\n        errors.push('No issue entries');\n    } else {\n        if (issues.filter(issue => !issue.title).length) {\n            errors.push('Issue title must not be empty');\n        }\n\n        if (issues.filter(issue => !issue.body).length) {\n            errors.push('Issue body must not be empty');\n        }\n    }\n\n    if (errors.length) {\n        throw errors;\n    }\n\n    const promises = [];\n\n    issues.forEach((issue) => {\n        promises.push(axios({\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `token ${accessToken}`,\n            },\n            url: `/repos/${repository}/issues`,\n            method: 'POST',\n            data: JSON.stringify(issue),\n        }));\n    });\n\n    const response = await axios.all(promises);\n\n    return response;\n};\n\nexport const apiUpdateIssues = async (issueData, repository, accessToken) => {\n    const errors = [];\n\n    if (!repository) {\n        errors.push('Repository must not be empty');\n    }\n\n    const issues = Array.isArray(issueData) ? issueData : [issueData];\n\n    if (!issues.length) {\n        errors.push('No issue entries');\n    } else {\n        if (issues.filter(issue => !issue.title).length) {\n            errors.push('Issue title must not be empty');\n        }\n\n        if (issues.filter(issue => !issue.body).length) {\n            errors.push('Issue body must not be empty');\n        }\n    }\n\n    if (errors.length) {\n        throw errors;\n    }\n\n    const promises = [];\n\n    issues.forEach((issue) => {\n        promises.push(axios({\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `token ${accessToken}`,\n            },\n            url: `/repos/${repository}/issues/${issue.number}`,\n            method: 'PATCH',\n            data: JSON.stringify(issue),\n        }));\n    });\n\n    const response = await axios.all(promises);\n\n    return response;\n};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.github.com';\n\nconst fetchPerPage = 30;\n\nexport const apiFetchOwners = async (accessToken, cancelToken) => {\n    const fetchData = async (currentPage) => {\n        const payload = await axios({\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `token ${accessToken}`,\n            },\n            cancelToken: cancelToken,\n            url: '/user/orgs',\n            method: 'GET',\n            params: {\n                page: currentPage,\n                per_page: fetchPerPage,\n            },\n        });\n\n        return payload;\n    }\n\n    const records = [];\n\n    let currentPage = 1;\n    let keepGoing = true;\n\n    while (keepGoing) {\n        const response = await fetchData(currentPage);\n\n        await records.push(...response.data.map(item => ({ ...item, ...{ type: 'org' } })));\n\n        currentPage += 1;\n\n        if (response.data.length < fetchPerPage) {\n            keepGoing = false;\n            return records;\n        }\n    }\n};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.github.com';\n\nconst fetchPerPage = 30;\n\nexport const apiFetchRepsitories = async (org, accessToken, cancelToken) => {\n    if (!org) {\n        throw new Error('User or Organization cannot be empty');\n    }\n\n    const fetchData = async (currentPage) => {\n        const payload = await axios({\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `token ${accessToken}`,\n            },\n            cancelToken: cancelToken,\n            url: '/search/repositories',\n            method: 'GET',\n            params: {\n                q: `${org.type}:${org.login}`,\n                page: currentPage,\n                per_page: fetchPerPage,\n            },\n        });\n\n        return payload;\n    }\n\n    const records = [];\n    let currentPage = 1;\n    let keepGoing = true;\n\n    while (keepGoing) {\n        const response = await fetchData(currentPage);\n\n        await records.push(...response.data.items);\n\n        if (records.length >= response.data.total_count) {\n            keepGoing = false;\n            return records;\n        }\n\n        currentPage += 1;\n    }\n};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.github.com';\n\nconst fetchPerPage = 30;\n\nexport const apiFetchAssignees = async (org, accessToken, cancelToken) => {\n    if (!org) {\n        throw new Error('Organization cannot be empty');\n    }\n\n    const fetchData = async (currentPage) => {\n        const payload = await axios({\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `token ${accessToken}`,\n            },\n            cancelToken: cancelToken,\n            url: `/orgs/${org.login}/members`,\n            method: 'GET',\n            params: {\n                page: currentPage,\n                per_page: fetchPerPage,\n            },\n        });\n\n        return payload;\n    }\n\n    const records = [];\n    let currentPage = 1;\n    let keepGoing = true;\n\n    while (keepGoing) {\n        const response = await fetchData(currentPage);\n\n        await records.push(...response.data.map(item => ({\n            ...item,\n            ...{\n                org: org.login,\n            }\n        })));\n\n        if (response.data.length < fetchPerPage) {\n            keepGoing = false;\n            return records;\n        }\n\n        currentPage += 1;\n    }\n};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.github.com';\n\nconst fetchPerPage = 30;\n\nexport const apiFetchLabels = async (repository, accessToken, cancelToken) => {\n    if (!repository) {\n        throw new Error('Repository cannot be empty');\n    }\n\n    const repositoryName = repository.full_name || repository;\n\n    const fetchData = async (currentPage) => {\n        const payload = await axios({\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `token ${accessToken}`,\n            },\n            cancelToken: cancelToken,\n            url: `/repos/${repositoryName}/labels`,\n            method: 'GET',\n            params: {\n                page: currentPage,\n                per_page: fetchPerPage,\n            },\n        });\n\n        return payload;\n    }\n\n\n    const results = [];\n    let currentPage = 1;\n    let keepGoing = true;\n\n    while (keepGoing) {\n        const response = await fetchData(currentPage);\n\n        await results.push(...response.data);\n\n        if (response.data.length < fetchPerPage) {\n            keepGoing = false;\n            return results;\n        }\n\n        currentPage += 1;\n    }\n};\n\nexport const apiCreateLabels = async (labelData, repository, accessToken, cancelToken) => {\n    if (!labelData) {\n        throw new Error('Label data cannot be empty');\n    }\n\n    if (!repository) {\n        throw new Error('Repository cannot be empty');\n    }\n\n    const labels = Array.isArray(labelData) ? labelData : [labelData];\n\n    const promises = [];\n\n    labels.forEach((label) => {\n        promises.push(axios({\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `token ${accessToken}`,\n            },\n            cancelToken: cancelToken,\n            url: `/repos/${repository.full_name}/labels`,\n            method: 'POST',\n            data: JSON.stringify(label),\n        }));\n    });\n\n    const responses = await axios.all(promises);\n\n    return responses.map(response => response.data);\n};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.github.com';\n\nconst fetchPerPage = 30;\n\nexport const apiFetchMilestones = async (repository, accessToken, cancelToken) => {\n    if (!repository) {\n        throw new Error('Repository cannot be empty');\n    }\n\n    const repositoryName = repository.full_name || repository;\n\n    const fetchData = async (currentPage) => {\n        const payload = await axios({\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `token ${accessToken}`,\n            },\n            cancelToken: cancelToken,\n            url: `/repos/${repositoryName}/milestones`,\n            method: 'GET',\n            params: {\n                page: currentPage,\n                per_page: fetchPerPage,\n            },\n        });\n\n        return payload;\n    }\n\n    const results = [];\n    let currentPage = 1;\n    let keepGoing = true;\n\n    while (keepGoing) {\n        const response = await fetchData(currentPage);\n\n        await results.push.apply(results, response.data.map(item => ({\n            ...item, ...{\n                repo: repositoryName,\n            }\n        })));\n\n        if (response.data.length < fetchPerPage) {\n            keepGoing = false;\n            return results;\n        }\n\n        currentPage += 1;\n    }\n};\n\nexport const apiCreateMilestones = async (milestoneData, repository, accessToken, cancelToken) => {\n    if (!milestoneData) {\n        throw new Error('Milestone data cannot be empty');\n    }\n\n    if (!repository) {\n        throw new Error('Repository cannot be empty');\n    }\n\n    const repositoryName = repository.full_name || repository;\n    const milestones = Array.isArray(milestoneData) ? milestoneData : [milestoneData];\n\n    const promises = [];\n\n    milestones.forEach((milestone) => {\n        promises.push(axios({\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `token ${accessToken}`,\n            },\n            cancelToken: cancelToken,\n            url: `/repos/${repositoryName}/milestones`,\n            method: 'POST',\n            data: JSON.stringify(milestone),\n        }));\n    });\n\n    const responses = await axios.all(promises);\n\n    return responses.map(response => ({\n        ...response.data, ...{\n            repo: repositoryName,\n        }\n    }));\n};\n\nexport const apiUpdateMilestones = async (milestoneData, repository, accessToken, cancelToken) => {\n    if (!milestoneData) {\n        throw new Error('Milestone data cannot be empty');\n    }\n\n    if (repository) {\n        throw new Error('Repository cannot be empty');\n    }\n\n    const repositoryName = repository.full_name || repository;\n    const milestones = Array.isArray(milestoneData) ? milestoneData : [milestoneData];\n\n    const promises = [];\n\n    milestones.forEach((milestone) => {\n        promises.push(axios({\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `token ${accessToken}`,\n            },\n            cancelToken: cancelToken,\n            url: `/repos/${repositoryName}/milestones/${milestone.number}`,\n            method: 'PATCH',\n            data: JSON.stringify(milestone),\n        }));\n    });\n\n    const responses = await axios.all(promises);\n\n    return responses.map(response => ({\n        ...response.data, ...{\n            repo: repositoryName,\n        }\n    }));\n};","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    assign,\n    omit,\n    noop,\n} from 'lodash';\n\nimport {\n    Button,\n    Spinner,\n} from 'react-bootstrap';\n\nclass BGICButton extends PureComponent {\n    renderButton() {\n        const buttonProps = omit(this.props, ['buttonText', 'isLoading']);\n\n        if (this.props.isLoading) {\n            return (\n                <Button {...assign({}, buttonProps, { disabled: true })}>\n                    <Spinner\n                        as=\"span\"\n                        animation=\"border\"\n                        size=\"sm\"\n                        role=\"status\"\n                        aria-hidden=\"true\"\n                    />\n                </Button>\n            );\n        }\n\n        return (\n            <Button {...buttonProps}>\n                {this.props.buttonText}\n            </Button>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderButton()}\n            </React.Fragment>\n        );\n    }\n}\n\nBGICButton.propTypes = {\n    buttonText: PropTypes.string,\n    isLoading: PropTypes.bool,\n    onClick: PropTypes.func,\n};\n\nBGICButton.defaultProps = {\n    buttonText: '',\n    isLoading: false,\n    onClick: noop,\n};\n\nexport default BGICButton;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport reactStringReplace from 'react-string-replace';\n\nimport {\n    get,\n    isEmpty,\n    isFunction,\n    isEqual,\n    groupBy,\n    map,\n} from 'lodash';\n\nimport {\n    getAlert,\n    setAlert,\n    clearAlert,\n    isLoading,\n} from '../helpers/storage';\n\nimport {\n    Alert,\n    Form,\n    Breadcrumb,\n} from 'react-bootstrap';\n\nimport BGICButton from './button';\n\nclass BGICForm extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            validated: false,\n            alerts: false,\n            isLoading: false,\n            clickedButton: false,\n        }\n\n        this.onStorageChange = this.onStorageChange.bind(this);\n        this.onFormReset = this.onFormReset.bind(this);\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        window.addEventListener('storageChange', this.onStorageChange, false);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('storageChange', this.onStorageChange);\n    }\n\n    onStorageChange(event) {\n        const eventEntity = get(event, 'detail.entity');\n\n        if (eventEntity === 'alert') {\n            const alerts = getAlert();\n\n            if (!isEqual(alerts, this.state.alerts)) {\n                this.setState({\n                    alerts,\n                });\n            }\n\n        } else if (eventEntity === 'loadingState') {\n            const loading = isLoading();\n\n            if (loading !== this.state.isLoading) {\n                this.setState({\n                    isLoading: loading,\n                });\n            }\n        }\n    }\n\n    onFormReset(event) {\n        event.preventDefault();\n\n        this.clearAlerts()\n            .then(() => {\n                const {\n                    onFormReset\n                } = this.props;\n\n                if (isFunction(onFormReset)) {\n                    onFormReset();\n                }\n            });\n    }\n\n    onFormSubmit(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!event.currentTarget.checkValidity()) {\n            return this.setState({\n                validated: true,\n            });\n        }\n\n        this.clearAlerts()\n            .then(() => {\n                const {\n                    onFormSubmit\n                } = this.props;\n\n                if (isFunction(onFormSubmit)) {\n                    onFormSubmit(event);\n                }\n            });\n    }\n\n    closeAlerts(variant) {\n        setAlert(this.state.alerts.filter(alert => alert.variant !== variant));\n    }\n\n    clearAlerts() {\n        return new Promise(function (resolve) {\n            clearAlert();\n\n            setTimeout(function () {\n                resolve();\n            }, 1);\n        });\n    }\n\n    renderAlert() {\n        if (isEmpty(this.state.alerts)) {\n            return null;\n        }\n\n        return map(groupBy(this.state.alerts, 'variant'), (alerts, variant) => {\n            if (!variant || !alerts || !alerts.length) {\n                return false;\n            }\n\n            if (alerts.length === 1) {\n                return (\n                    <Alert key={variant} variant={variant} onClose={() => this.closeAlerts(variant)} dismissible>\n                        {reactStringReplace(alerts[0].message, /(%link%)/g, () => {\n                            if (!alerts[0].linkUrl || !alerts[0].linkAnchor) {\n                                return null;\n                            }\n\n                            return <Alert.Link key={variant} href={alerts[0].linkUrl} target=\"_blank\">{alerts[0].linkAnchor}</Alert.Link>;\n                        })}\n                    </Alert>\n                );\n            }\n\n            return (\n                <Alert key={variant} variant={variant} onClose={() => this.closeAlerts(variant)} dismissible>\n                    <ul className=\"mb-0\">\n                        {alerts.map((alert, index) => {\n                            const {\n                                message,\n                                linkUrl,\n                                linkAnchor,\n                            } = alert;\n\n                            const messages = reactStringReplace(message, /(%link%)/g, () => {\n                                if (!linkUrl || !linkAnchor) {\n                                    return null;\n                                }\n\n                                return <Alert.Link key={index} href={linkUrl} target=\"_blank\">{linkAnchor}</Alert.Link>;\n                            });\n\n                            return <li key={index} className=\"mb-0 ml-0\">{messages}</li>;\n                        })}\n                    </ul>\n                </Alert>\n            );\n        });\n    }\n\n    renderFormTitle() {\n        if (!this.props.formTitle) {\n            return null;\n        }\n\n        return (\n            <Breadcrumb>\n                <Breadcrumb.Item active>{this.props.formTitle}</Breadcrumb.Item>\n            </Breadcrumb>\n        );\n    }\n\n    renderButtons() {\n        const {\n            buttonSize,\n            buttonBlock,\n            buttonReset,\n            buttonResetDisabled,\n            buttonResetText,\n            buttonSubmit,\n            buttonSubmitDisabled,\n            buttonSubmitText,\n        } = this.props;\n\n        const buttons = [];\n\n        if (buttonReset) {\n            buttons.push({\n                variant: 'secondary',\n                type: 'reset',\n                buttonText: buttonResetText,\n                size: buttonSize,\n                block: buttonBlock,\n                className: !buttonBlock ? 'float-left' : '',\n                disabled: this.state.isLoading || buttonResetDisabled,\n            });\n        }\n\n        if (buttonSubmit) {\n            buttons.push({\n                variant: 'primary',\n                type: 'submit',\n                buttonText: buttonSubmitText,\n                size: buttonSize,\n                block: buttonBlock,\n                className: !buttonBlock ? 'float-right' : '',\n                isLoading: this.state.isLoading,\n                disabled: this.state.isLoading || buttonSubmitDisabled,\n            });\n        }\n\n        if (!buttons.length) {\n            return null;\n        }\n\n        return (\n            <div className=\"clearfix mt-4\">\n                {buttons.map(button => <BGICButton key={button.type} {...button} />)}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Form\n                noValidate\n                validated={this.state.validated}\n                onReset={this.onFormReset}\n                onSubmit={this.onFormSubmit}\n            >\n                {this.renderFormTitle()}\n                {this.renderAlert()}\n                {this.props.children}\n                {this.renderButtons()}\n            </Form>\n        );\n    }\n}\n\nBGICForm.propTypes = {\n    formTitle: PropTypes.string.isRequired,\n    buttonSize: PropTypes.string.isRequired,\n    buttonBlock: PropTypes.bool.isRequired,\n\n    buttonReset: PropTypes.bool.isRequired,\n    buttonResetDisabled: PropTypes.bool.isRequired,\n    buttonResetText: PropTypes.string.isRequired,\n    onFormReset: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.bool,\n    ]).isRequired,\n\n    buttonSubmit: PropTypes.bool.isRequired,\n    buttonSubmitDisabled: PropTypes.bool.isRequired,\n    buttonSubmitText: PropTypes.string.isRequired,\n    onFormSubmit: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.bool,\n    ]).isRequired,\n};\n\nBGICForm.defaultProps = {\n    formTitle: '',\n    buttonSize: '',\n    buttonBlock: false,\n\n    buttonReset: true,\n    buttonResetDisabled: false,\n    buttonResetText: 'Reset',\n    onFormReset: false,\n\n    buttonSubmit: true,\n    buttonSubmitDisabled: false,\n    buttonSubmitText: 'Submit',\n    onFormSubmit: false,\n};\n\nexport default BGICForm;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    isEmpty,\n    noop,\n} from 'lodash';\n\nimport {\n    Container,\n    Navbar,\n    Nav,\n    NavDropdown,\n    Form,\n    Modal,\n    Button,\n} from 'react-bootstrap';\n\nimport {\n    apiAuth,\n} from '../api';\n\nimport {\n    startLoading,\n    stopLoading,\n    setAlertError,\n    isLoading,\n} from '../helpers/storage';\n\nimport BGICForm from './form';\n\nconst repoUrl = 'https://github.com/sofyansitorus/Bulk-GitHub-Issue-Creator';\n\nclass BGICNavbar extends PureComponent {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            accessToken: '',\n            showLoginModal: false,\n            showLogoutModal: false,\n        };\n\n        this.onChangeAccessToken = this.onChangeAccessToken.bind(this);\n        this.onUserLogin = this.onUserLogin.bind(this);\n        this.onUserLogout = this.onUserLogout.bind(this);\n        this.toggleLoginModal = this.toggleLoginModal.bind(this);\n        this.toggleLogoutModal = this.toggleLogoutModal.bind(this);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    onChangeAccessToken(event) {\n        this.setState({\n            accessToken: event.target.value,\n        });\n    }\n\n    onUserLogin() {\n        const {\n            currentUser,\n            onUserLogin,\n        } = this.props;\n\n        if (currentUser) {\n            return;\n        }\n\n        const {\n            accessToken\n        } = this.state;\n\n        startLoading();\n\n        apiAuth(accessToken)\n            .then((response) => {\n                if (this._isMounted) {\n                    this.setState({\n                        accessToken: '',\n                        showLoginModal: false,\n                        showLogoutModal: false,\n                    });\n\n                    onUserLogin(accessToken, response.data);\n                }\n            })\n            .catch((error) => {\n                if (this._isMounted) {\n                    setAlertError(error);\n                }\n            }).finally(() => {\n                if (this._isMounted) {\n                    stopLoading();\n                }\n            });\n    }\n\n    onUserLogout() {\n        const {\n            currentUser,\n            onUserLogout,\n        } = this.props;\n\n        if (!currentUser) {\n            return;\n        }\n\n        this.setState({\n            accessToken: '',\n            showLoginModal: false,\n            showLogoutModal: false,\n        });\n\n        onUserLogout();\n    }\n\n    toggleLoginModal() {\n        this.setState({\n            showLoginModal: !this.state.showLoginModal,\n        });\n    }\n\n    toggleLogoutModal() {\n        this.setState({\n            showLogoutModal: !this.state.showLogoutModal,\n        });\n    }\n\n    renderUserMenu() {\n        const {\n            currentUser,\n        } = this.props;\n\n        if (isEmpty(currentUser)) {\n            return (\n                <Nav.Link as={Button} className=\"px-5 text-light\" variant=\"success\" onClick={this.toggleLoginModal}>\n                    Login\n                </Nav.Link>\n            );\n        }\n\n        return (\n            <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n                <NavDropdown title={currentUser.name} id=\"basic-nav-dropdown\">\n                    <NavDropdown.Item onClick={this.toggleLogoutModal}>Logout</NavDropdown.Item>\n                </NavDropdown>\n            </Navbar.Collapse>\n        );\n    }\n\n    renderLoginModal() {\n        const {\n            currentUser,\n        } = this.props;\n\n        if (currentUser) {\n            return null;\n        }\n\n        const {\n            showLoginModal,\n        } = this.state;\n\n        return (\n            <Modal\n                backdrop=\"static\"\n                onHide={this.toggleLoginModal}\n                show={showLoginModal}\n                centered\n            >\n                <Modal.Header closeButton={!isLoading()}>\n                    <Modal.Title className=\"text-center\">Login</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <BGICForm\n                        onFormSubmit={this.onUserLogin}\n                        buttonReset={false}\n                        buttonSubmitText=\"Auth\"\n                        buttonBlock\n                    >\n                        <Form.Group>\n                            <Form.Label>Personal Access Token</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"accessToken\"\n                                placeholder=\"Enter here the token you have created\"\n                                size=\"lg\"\n                                onChange={this.onChangeAccessToken}\n                                required\n                            />\n                        </Form.Group>\n                        <p><a href=\"https://github.com/settings/tokens\" target=\"_blank\" rel=\"noopener noreferrer\">Create your own personal access token</a> if you don't have it yet</p>\n                    </BGICForm>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n\n    renderLogoutModal() {\n        const {\n            currentUser,\n        } = this.props;\n\n        if (!currentUser) {\n            return null;\n        }\n\n        const {\n            showLogoutModal,\n        } = this.state;\n\n        return (\n            <Modal\n                backdrop=\"static\"\n                onHide={this.toggleLogoutModal}\n                show={showLogoutModal}\n                centered\n            >\n                <Modal.Header closeButton={!isLoading()}>\n                    <Modal.Title className=\"text-center\">Logout</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p>Are you sure want to logout?</p>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={this.toggleLogoutModal}>Cancel</Button>\n                    <Button variant=\"primary\" onClick={this.onUserLogout}>Yes</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                    <Container>\n                        <Navbar.Brand href={repoUrl} target=\"_blank\">Bulk GitHub Issue Creator</Navbar.Brand>\n                        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                        <Navbar.Collapse id=\"responsive-navbar-nav\">\n                            <Nav className=\"mr-auto\">\n                                <Nav.Link href={`${repoUrl}/fork`} target=\"_blank\">Fork on GitHub</Nav.Link>\n                            </Nav>\n                            <Nav>\n                                {this.renderUserMenu()}\n                            </Nav>\n                        </Navbar.Collapse>\n                    </Container>\n                </Navbar>\n                {this.renderLoginModal()}\n                {this.renderLogoutModal()}\n            </React.Fragment>\n        );\n    }\n}\n\nBGICNavbar.propTypes = {\n    currentUser: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n    onUserLogin: PropTypes.func.isRequired,\n    onUserLogout: PropTypes.func.isRequired,\n};\n\nBGICNavbar.defaultProps = {\n    currentUser: {},\n    onUserLogin: noop,\n    onUserLogout: noop,\n};\n\nexport default BGICNavbar;\n","import React, { PureComponent } from 'react';\n\nimport {\n    Container,\n    Row,\n    Col,\n} from 'react-bootstrap';\n\n\nclass BGICPageWelcome extends PureComponent {\n    youtubeId = '65goGnLQUuA';\n\n    render() {\n        return (\n            <Container className=\"mt-5 py-5\">\n                <Row>\n                    <Col md={6} className=\"mt-5\">\n                        <h1>Bulk GitHub Issue Creator</h1>\n                        <p>A lightweight, fast & responsive GitHub issues in bulk or individually! Create a bunch of issues all at once by importing JSON or CSV file.</p>\n\n                        <h5>Key Features:</h5>\n                        <ul>\n                            <li>Create bulk issues by impoting JSON/CSV file</li>\n                            <li>Create bulk issues by copy & paste JSON/CSV formatted text</li>\n                            <li>Create single issue</li>\n                            <li>Edit existing issue</li>\n                            <li>Markdown editor & preview</li>\n                        </ul>\n                    </Col>\n                    <Col md={6}>\n                        <div\n                            className=\"video\"\n                            style={{\n                                position: \"relative\",\n                                paddingBottom: \"56.25%\" /* 16:9 */,\n                                paddingTop: 25,\n                                height: 0\n                            }}\n                        >\n                            <iframe\n                                style={{\n                                    position: \"absolute\",\n                                    top: 0,\n                                    left: 0,\n                                    width: \"100%\",\n                                    height: \"100%\"\n                                }}\n                                title=\"Bulk GitHub Issue Creator\"\n                                src={`https://www.youtube.com/embed/${this.youtubeId}`}\n                                frameBorder=\"0\"\n                                allowFullScreen\n                            />\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default BGICPageWelcome;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactMarkdown from 'react-markdown';\n\nimport {\n    noop,\n} from 'lodash';\n\nimport {\n    Form,\n    Tabs,\n    Tab,\n    Button,\n} from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    faMarkdown,\n} from '@fortawesome/free-brands-svg-icons';\n\nclass BGICFormIssue extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeTab: 'editor',\n        };\n\n        this.onSelectTab = this.onSelectTab.bind(this);\n        this.onChangeIssueTitle = this.onChangeIssueTitle.bind(this);\n        this.onChangeIssueBody = this.onChangeIssueBody.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.state.activeTab !== 'editor' && !nextProps.issueBody.trim().length) {\n            this.setState({\n                activeTab: 'editor',\n            });\n        }\n    }\n\n    onSelectTab(activeTab) {\n        this.setState({\n            activeTab,\n        });\n    }\n\n    onChangeIssueTitle(event) {\n        this.props.onChangeIssueTitle(event.target.value);\n    }\n\n    onChangeIssueBody(event) {\n        this.props.onChangeIssueBody(event.target.value);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Form.Group>\n                    <Form.Label>Issue Title</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Type the issue title...\"\n                        value={this.props.issueTitle}\n                        onChange={this.onChangeIssueTitle}\n                        required\n                    />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Issue Description</Form.Label>\n                    <Tabs defaultActiveKey=\"editor\" onSelect={this.onSelectTab}>\n                        <Tab\n                            eventKey=\"editor\"\n                            title=\"Editor\"\n                            className=\"border-right border-bottom border-left p-4 rounded\"\n                        >\n                            <Form.Control\n                                as=\"textarea\"\n                                rows=\"10\"\n                                placeholder=\"Type the issue description...\"\n                                value={this.props.issueBody}\n                                onChange={this.onChangeIssueBody}\n                                required\n                            />\n                            <Button\n                                variant=\"link\"\n                                href=\"https://guides.github.com/features/mastering-markdown/\"\n                                target=\"_blank\"\n                                className=\"p-0 mt-2 mb-0\"\n                            >\n                                <FontAwesomeIcon icon={faMarkdown} /> Styling with Markdown is supported\n                            </Button>\n                        </Tab>\n                        <Tab\n                            eventKey=\"preview\"\n                            title=\"Preview\"\n                            disabled={!this.props.issueBody.trim().length}\n                            className=\"border-right border-bottom border-left p-4 rounded\"\n                        >\n                            <ReactMarkdown source={this.props.issueBody} />\n                        </Tab>\n                    </Tabs>\n                </Form.Group>\n            </React.Fragment>\n        );\n    }\n}\n\nBGICFormIssue.propTypes = {\n    issueTitle: PropTypes.string.isRequired,\n    issueBody: PropTypes.string.isRequired,\n    onChangeIssueTitle: PropTypes.func.isRequired,\n    onChangeIssueBody: PropTypes.func.isRequired,\n};\n\nBGICFormIssue.defaultProps = {\n    issueTitle: '',\n    issueBody: '',\n    onChangeIssueTitle: noop,\n    onChangeIssueBody: noop,\n};\n\nexport default BGICFormIssue;","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    assign,\n} from 'lodash';\n\nimport {\n    apiCreateIssues,\n} from '../api';\n\nimport {\n    startLoading,\n    stopLoading,\n    setAlertSuccess,\n    setAlertError,\n} from '../helpers/storage';\n\nimport BGICForm from './form';\nimport BGICFormIssue from './form-issue';\n\nclass BGICTabSingleIssue extends PureComponent {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editingIssueTitle: '',\n            editingIssueBody: '',\n        };\n\n        this.onFormReset = this.onFormReset.bind(this);\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.onChangeIssueTitle = this.onChangeIssueTitle.bind(this);\n        this.onChangeIssueBody = this.onChangeIssueBody.bind(this);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    onFormReset() {\n        this.setState({\n            editingIssueTitle: '',\n            editingIssueBody: '',\n        });\n    }\n\n    onFormSubmit() {\n        const {\n            accessToken,\n            repositorySelected,\n            assigneesSelected,\n            labelsSelected,\n            milestonesSelected,\n        } = this.props;\n\n        const {\n            editingIssueTitle,\n            editingIssueBody,\n        } = this.state;\n\n        const issueData = {\n            title: editingIssueTitle,\n            body: editingIssueBody,\n            assignees: assigneesSelected ? assigneesSelected.map(assignee => assignee.login) : [],\n            labels: labelsSelected ? labelsSelected.map(label => label.name) : [],\n            milestone: milestonesSelected ? milestonesSelected.number : undefined,\n        };\n\n        startLoading();\n\n        apiCreateIssues(issueData, repositorySelected.full_name, accessToken)\n            .then((responses) => {\n                if (this._isMounted) {\n                    this.onFormReset();\n                    setAlertSuccess(responses.map(response => assign({}, {\n                        message: 'Issue %link% has been successfully created',\n                        linkUrl: response.data.html_url,\n                        linkAnchor: `#${response.data.number}`,\n                    })));\n                }\n            }).catch((error) => {\n                if (this._isMounted) {\n                    setAlertError(error);\n                }\n            }).finally(() => {\n                if (this._isMounted) {\n                    stopLoading();\n                }\n            });\n    }\n\n    onChangeIssueTitle(editingIssueTitle) {\n        this.setState({\n            editingIssueTitle,\n        });\n    }\n\n    onChangeIssueBody(editingIssueBody) {\n        this.setState({\n            editingIssueBody,\n        });\n    }\n\n    render() {\n        return (\n            <BGICForm\n                buttonSubmitText=\"Create Issue\"\n                onFormReset={this.onFormReset}\n                onFormSubmit={this.onFormSubmit}\n            >\n                <BGICFormIssue\n                    issueTitle={this.state.editingIssueTitle}\n                    issueBody={this.state.editingIssueBody}\n                    onChangeIssueTitle={this.onChangeIssueTitle}\n                    onChangeIssueBody={this.onChangeIssueBody}\n                />\n            </BGICForm>\n        );\n    }\n}\n\nBGICTabSingleIssue.propTypes = {\n    accessToken: PropTypes.string.isRequired,\n    ownerSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n    repositorySelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n    assigneesSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.array,\n    ]).isRequired,\n    labelsSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.array,\n    ]).isRequired,\n    milestonesSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n};\n\nexport default BGICTabSingleIssue;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport {\n    faEdit,\n    faLink,\n    faTrash,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport {\n    Button,\n    ButtonGroup,\n    Dropdown,\n    DropdownButton,\n    FormControl,\n    InputGroup,\n    OverlayTrigger,\n    Pagination,\n    Table,\n    Tooltip,\n} from 'react-bootstrap';\n\nimport {\n    assign,\n    debounce,\n    get,\n    has,\n    isEmpty,\n    isEqual,\n    noop,\n} from 'lodash';\n\nclass BGICIssueList extends PureComponent {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isTypingKeyword: false,\n            filterParams: props.filterParams,\n        };\n\n        this.onChangeFilterParams = this.onChangeFilterParams.bind(this);\n        this.onChangeFilterParamsDebounced = debounce(this.props.onChangeFilterParams, 500);\n    }\n\n    componentWillUnmount() {\n        this.onChangeFilterParamsDebounced.cancel();\n    }\n\n    componentDidUpdate() {\n        if (!this.state.isTypingKeyword && !isEqual(this.props.filterParams, this.state.filterParams)) {\n            this.setState({\n                filterParams: this.props.filterParams,\n            });\n        }\n    }\n\n    onChangeFilterParams(name, value, debounce = false) {\n        this.setState({\n            filterParams: assign({}, this.state.filterParams, {\n                [`${name}`]: value,\n            }),\n        });\n\n        if (!debounce) {\n            return this.props.onChangeFilterParams(name, value);\n        }\n\n        this.onChangeFilterParamsDebounced(name, value);\n    }\n\n    renderFilterBar() {\n        const {\n            filterParams,\n        } = this.state;\n\n        if (isEmpty(filterParams)) {\n            return null;\n        }\n\n        const dropdowns = [\n            {\n                name: 'searchIssuesSort',\n                title: 'Sort',\n                defaultValue: 'sort:created-desc',\n                items: [\n                    {\n                        label: 'Newest',\n                        value: 'sort:created-desc',\n                    },\n                    {\n                        label: 'Oldest',\n                        value: 'sort:created-asc',\n                    },\n                    {\n                        label: 'Recently updated',\n                        value: 'sort:updated-desc',\n                    },\n                    {\n                        label: 'Least updated',\n                        value: 'sort:updated-asc',\n                    },\n                ],\n            },\n            {\n                name: 'searchIssuesStatus',\n                title: 'Status',\n                defaultValue: 'is:open',\n                items: [\n                    {\n                        label: 'Open',\n                        value: 'is:open',\n                    },\n                    {\n                        label: 'Closed',\n                        value: 'is:closed',\n                    },\n                ],\n            },\n        ];\n\n        const dropdownsOutput = dropdowns.map(dropdown => {\n            if (!has(filterParams, dropdown.name)) {\n                return false;\n            }\n\n            const activeItem = dropdown.items.filter(item => item.value === get(filterParams, dropdown.name, dropdown.defaultValue));\n            const activeItemValue = activeItem.length === 1 ? activeItem[0].value : '';\n            const activeItemLabel = activeItem.length === 1 ? activeItem[0].label : '';\n            const dropdownTitle = () => {\n                if (!activeItemLabel) {\n                    return dropdown.title;\n                }\n\n                return `${dropdown.title}: ${activeItemLabel}`;\n            }\n\n            return (\n                <DropdownButton\n                    key={dropdown.name}\n                    as={dropdown.as || InputGroup.Prepend}\n                    variant={dropdown.variant || 'outline-secondary'}\n                    title={dropdownTitle()}\n                >\n                    {\n                        dropdown.items.map(item => <Dropdown.Item\n                            key={item.value}\n                            href=\"#\"\n                            active={activeItemValue === item.value}\n                            onClick={() => this.onChangeFilterParams(dropdown.name, item.value)}\n                        >\n                            {item.label}\n                        </Dropdown.Item>)\n                    }\n                </DropdownButton>\n            );\n        });\n\n        const keywordOutput = has(filterParams, 'searchIssuesKeyword')\n            ? <FormControl\n                placeholder=\"Keyword\"\n                aria-label=\"Keyword\"\n                type=\"search\"\n                value={get(filterParams, 'searchIssuesKeyword', '')}\n                onChange={(event) => this.onChangeFilterParams('searchIssuesKeyword', event.target.value, true)}\n                onFocus={() => this.setState({ isTypingKeyword: true })}\n                onBlur={() => this.setState({ isTypingKeyword: false })}\n            />\n            : null;\n\n        if (isEmpty(dropdownsOutput) && isEmpty(keywordOutput)) {\n            return null;\n        }\n\n        return (\n            <InputGroup\n                className=\"mb-3\"\n            >\n                {dropdownsOutput}\n                {keywordOutput}\n            </InputGroup>\n        );\n    }\n\n    renderPagination() {\n        const {\n            issues,\n            currentPage,\n            totalPages,\n        } = this.props;\n\n        if (!issues || !issues.length || issues instanceof Error) {\n            return null;\n        }\n\n        const range = 2;\n        const rangeLeft = currentPage - range;\n        const rangeRight = currentPage + range + 1;\n        const pages = [];\n        const pagesAll = ['prev'];\n\n        for (let index = 1; index <= totalPages; index++) {\n            if (index === 1 || index === totalPages || (index >= rangeLeft && index < rangeRight)) {\n                pages.push(index);\n            }\n        }\n\n        if (pages.length < 2) {\n            return null;\n        }\n\n        for (let index = 0; index < pages.length; index++) {\n            pagesAll.push(pages[index]);\n\n            const nextIndex = index + 1;\n\n            if (pages[nextIndex] && pages[index] + 1 !== pages[nextIndex]) {\n                pagesAll.push('...');\n            }\n        }\n\n        pagesAll.push('next');\n\n        const items = pagesAll.map((page, index) => {\n            const pageKey = `${index}--${page}`\n            const pagePrev = parseInt(currentPage - 1);\n            const pageNext = parseInt(currentPage + 1);\n\n            switch (page) {\n                case '...':\n                    return <Pagination.Ellipsis key={pageKey} disabled />;\n\n                case 'prev':\n                    return <Pagination.Prev key={pageKey} disabled={pagePrev < 1} onClick={() => this.props.onChangePagination(pagePrev)} />;\n\n                case 'next':\n                    return <Pagination.Next key={pageKey} disabled={pageNext > totalPages} onClick={() => this.props.onChangePagination(pageNext)} />;\n\n                default:\n                    return <Pagination.Item key={pageKey} active={page === currentPage} onClick={() => this.props.onChangePagination(page)}>{page}</Pagination.Item>;\n            }\n        });\n\n        return (\n            <Pagination>{items}</Pagination>\n        );\n    }\n\n    renderActionButton(issue, name, icon) {\n        const isButtonVisible = get(issue, `button${name}Visible`, get(this.props, `button${name}Visible`, false));\n\n        if (!isButtonVisible) {\n            return null;\n        }\n\n        const buttonActionHandler = get(this.props, `button${name}Handler`);\n        const isButtonDisabled = get(issue, `button${name}Disabled`, get(this.props, `button${name}Disabled`, false));\n        const buttonActionUrl = name === 'View' ? get(issue, 'html_url', false) : get(issue, `html_url_${name.toLowerCase()}`, false);\n        const buttonActionText = icon ? <FontAwesomeIcon icon={icon} /> : name;\n\n        const buttonOutput = buttonActionUrl\n            ? (<Button variant=\"link\" size=\"sm\" href={buttonActionUrl} target=\"_blank\" disabled={isButtonDisabled} title={name}>\n                {buttonActionText}\n            </Button>)\n            : (<Button variant=\"link\" size=\"sm\" onClick={() => buttonActionHandler(issue)} disabled={isButtonDisabled} title={name}>\n                {buttonActionText}\n            </Button>);\n\n        return (\n            <OverlayTrigger key={`${issue.id}--${name}`} placement=\"top\" overlay={<Tooltip>{name}</Tooltip>}>\n                {buttonOutput}\n            </OverlayTrigger>\n        );\n\n    }\n\n    renderActionColumn(issue) {\n        const actions = [{\n            label: 'Edit',\n            icon: faEdit,\n        }, {\n            label: 'Delete',\n            icon: faTrash,\n        }, {\n            label: 'View',\n            icon: faLink,\n        }];\n\n        const columnActions = actions.map(action => this.renderActionButton(issue, action.label, action.icon));\n        const columnActionsCount = columnActions.filter(action => action).length;\n\n        if (!columnActionsCount) {\n            return null;\n        }\n\n        const columnWidth = (columnActionsCount * 30) + 28;\n\n        return (\n            <td className=\"text-center\" style={{ width: `${columnWidth}px` }}>\n                <ButtonGroup aria-label=\"Actions\">\n                    {columnActions}\n                </ButtonGroup>\n            </td>\n        );\n\n    }\n\n    renderTable() {\n        const textFetchingData = 'Fetching data...';\n        const textNoRecords = 'No records found';\n        const {\n            issues,\n            isFetchingData,\n        } = this.props;\n\n        const itemsOutput = () => {\n            if (!issues || !issues.length || issues instanceof Error) {\n                let textContent = textNoRecords;\n\n                if (issues instanceof Error) {\n                    textContent = issues.toString();\n                }\n\n                if (isFetchingData) {\n                    textContent = textFetchingData;\n                }\n\n                return (\n                    <tr>\n                        <td className=\"text-center\">\n                            {textContent}\n                        </td>\n                    </tr>\n                );\n            }\n\n            return issues.map((issue) => {\n                const actionColumnOutput = this.renderActionColumn(issue);\n\n                return (\n                    <tr key={issue.id}>\n                        <td>\n                            <div>{issue.title}</div>\n                        </td>\n                        {actionColumnOutput}\n                    </tr>\n                );\n            });\n        };\n\n        return (\n            <LoadingOverlay\n                active={isFetchingData}\n                text={textFetchingData}\n                spinner\n            >\n                <Table striped bordered hover>\n                    <tbody>\n                        {itemsOutput()}\n                    </tbody>\n                </Table>\n                {this.renderPagination()}\n            </LoadingOverlay>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderFilterBar()}\n                {this.renderTable()}\n            </React.Fragment>\n        );\n    }\n}\n\nBGICIssueList.propTypes = {\n    issues: PropTypes.oneOfType([\n        PropTypes.array,\n        PropTypes.instanceOf(Error),\n    ]),\n\n    buttonEditVisible: PropTypes.bool,\n    buttonEditDisabled: PropTypes.bool,\n    buttonEditHandler: PropTypes.func,\n\n    buttonDeleteVisible: PropTypes.bool,\n    buttonDeleteDisabled: PropTypes.bool,\n    buttonDeleteHandler: PropTypes.func,\n\n    buttonViewVisible: PropTypes.bool,\n    buttonViewDisabled: PropTypes.bool,\n    buttonViewHandler: PropTypes.func,\n\n    isFetchingData: PropTypes.bool,\n\n    currentPage: PropTypes.number,\n    totalPages: PropTypes.number,\n    onChangePagination: PropTypes.func,\n\n    filterParams: PropTypes.object,\n    onChangeFilterParams: PropTypes.func,\n};\n\nBGICIssueList.defaultProps = {\n    issues: [],\n\n    buttonEditVisible: false,\n    buttonEditDisabled: false,\n    buttonEditHandler: noop,\n\n    buttonDelete: false,\n    buttonDeleteDisabled: false,\n    buttonDeleteHandler: noop,\n\n    buttonViewVisible: false,\n    buttonViewDisabled: false,\n    buttonViewHandler: noop,\n\n    isFetchingData: false,\n\n    currentPage: 1,\n    totalPages: 1,\n    onChangePagination: noop,\n\n    filterParams: {},\n    onChangeFilterParams: noop,\n};\n\nexport default BGICIssueList;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    assign,\n    get,\n    uniqueId,\n} from 'lodash';\n\nimport {\n    apiCreateIssues,\n} from '../api';\n\nimport {\n    startLoading,\n    stopLoading,\n    setAlertSuccess,\n    setAlertError,\n    getDataImportedIssues,\n    setDataImportedIssues,\n    setDataImportedIssue,\n    removeDataImportedIssue,\n    removeDataImportedIssues,\n} from '../helpers/storage';\n\nimport {\n    Col,\n    Row,\n    Form,\n    Button,\n} from 'react-bootstrap';\n\nimport BGICForm from './form';\nimport BGICFormIssue from './form-issue';\nimport BGICIssueList from './issue-list';\n\nclass BGICTabMultipleIssue extends PureComponent {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editingIssue: false,\n            editingIssueTitle: '',\n            editingIssueBody: '',\n            importMethod: 'upload',\n            dataType: 'json',\n            importedText: '',\n            dataSeparator: ',',\n            issues: getDataImportedIssues(),\n        };\n\n        this.onStorageChange = this.onStorageChange.bind(this);\n        this.onFormReset = this.onFormReset.bind(this);\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.onChangeIssueTitle = this.onChangeIssueTitle.bind(this);\n        this.onChangeIssueBody = this.onChangeIssueBody.bind(this);\n        this.onClickIssueEdit = this.onClickIssueEdit.bind(this);\n        this.onClickIssueDelete = this.onClickIssueDelete.bind(this);\n        this.onChangeDataType = this.onChangeDataType.bind(this);\n        this.onChangeDataSeparator = this.onChangeDataSeparator.bind(this);\n        this.onChangeImportMethod = this.onChangeImportMethod.bind(this);\n        this.onChangeUpload = this.onChangeUpload.bind(this);\n        this.onChangePaste = this.onChangePaste.bind(this);\n        this.onParseImportedText = this.onParseImportedText.bind(this);\n        this.onDownloadSample = this.onDownloadSample.bind(this);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        window.addEventListener('storageChange', this.onStorageChange, false);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        window.removeEventListener('storageChange', this.onStorageChange);\n    }\n\n    onStorageChange(event) {\n        const eventDataEntity = get(event, 'detail.entity');\n\n        if (eventDataEntity !== 'issue_imported') {\n            return;\n        }\n\n        this.setState({\n            issues: getDataImportedIssues(),\n        });\n    }\n\n    onFormReset() {\n        if (this.state.editingIssue) {\n            this.setState({\n                editingIssue: false,\n                editingIssueTitle: '',\n                editingIssueBody: '',\n            });\n        } else {\n            this.setState({\n                importedText: '',\n            });\n\n            removeDataImportedIssues();\n        }\n    }\n\n    onFormSubmit() {\n        const {\n            editingIssue,\n            editingIssueTitle,\n            editingIssueBody,\n        } = this.state;\n\n        if (editingIssue) {\n            setDataImportedIssue(assign({}, editingIssue, {\n                title: editingIssueTitle,\n                body: editingIssueBody,\n            }));\n\n            return this.onFormReset();\n        }\n\n        const {\n            accessToken,\n            repositorySelected,\n            assigneesSelected,\n            labelsSelected,\n            milestonesSelected,\n        } = this.props;\n\n        const issues = this.state.issues.map(issue => assign({}, {\n            title: issue.title,\n            body: issue.body,\n            assignees: assigneesSelected ? assigneesSelected.map(assignee => assignee.login) : [],\n            labels: labelsSelected ? labelsSelected.map(label => label.name) : [],\n            milestone: milestonesSelected ? milestonesSelected.number : undefined,\n        }));\n\n        startLoading();\n\n        apiCreateIssues(issues, repositorySelected.full_name, accessToken)\n            .then((responses) => {\n                if (this._isMounted) {\n                    this.onFormReset();\n                    setAlertSuccess(responses.map(response => assign({}, {\n                        message: 'Issue %link% has been successfully created',\n                        linkUrl: response.data.html_url,\n                        linkAnchor: `#${response.data.number}`,\n                    })));\n                }\n            }).catch((error) => {\n                if (this._isMounted) {\n                    setAlertError(error);\n                }\n            }).finally(() => {\n                if (this._isMounted) {\n                    stopLoading();\n                }\n            });\n    }\n\n    onChangeIssueTitle(editingIssueTitle) {\n        this.setState({\n            editingIssueTitle,\n        });\n    }\n\n    onChangeIssueBody(editingIssueBody) {\n        this.setState({\n            editingIssueBody,\n        });\n    }\n\n    onClickIssueEdit(editingIssue) {\n        if (!editingIssue) {\n            return;\n        }\n\n        const {\n            title,\n            body,\n        } = editingIssue;\n\n        this.setState({\n            editingIssueTitle: title,\n            editingIssueBody: body,\n            editingIssue,\n        });\n    }\n\n    onClickIssueDelete(issue) {\n        removeDataImportedIssue(issue);\n    }\n\n    onChangeDataType(event) {\n        this.setState({\n            dataType: event.target.value,\n            importedText: '',\n        });\n    }\n\n    onChangeImportMethod(event) {\n        this.setState({\n            importMethod: event.target.value,\n            importedText: '',\n        });\n    }\n\n    onChangeDataSeparator(event) {\n        this.setState({\n            dataSeparator: event.target.value,\n        });\n    }\n\n    onChangeUpload(event) {\n        const {\n            importMethod,\n        } = this.state;\n\n        if (importMethod !== 'upload') {\n            return;\n        }\n\n        if (event.target.files.length) {\n            try {\n                const fileReader = new FileReader();\n\n                fileReader.onloadend = (event) => {\n                    this.setState({\n                        importedText: event.target.result.toString(),\n                    });\n                };\n\n                fileReader.readAsText(event.target.files[0]);\n            } catch (error) {\n                setAlertError(error);\n            }\n        } else {\n            this.setState({\n                importedText: '',\n            });\n        }\n    }\n\n    onChangePaste(event) {\n        const {\n            importMethod,\n        } = this.state;\n\n        if (importMethod !== 'paste') {\n            return;\n        }\n\n        this.setState({\n            importedText: event.target.value,\n        });\n    }\n\n    onParseImportedText() {\n        const {\n            dataType,\n            importedText,\n            dataSeparator,\n        } = this.state;\n\n        try {\n            let issues = [];\n\n            if (dataType === 'json') {\n                issues = JSON.parse(importedText).map(issue => assign({}, issue, {\n                    id: uniqueId(),\n                }));\n            } else {\n                /**\n                 * Wrapped csv line parser\n                 * @param s string delimited csv string\n                 * @param sep separator override\n                 * @attribution : http://www.greywyvern.com/?post=258 (comments closed on blog :( )\n                 */\n                const CSVParse = (s, sep) => {\n                    const a = s.split(/\\r\\n|\\r|\\n/g);\n\n                    for (var i in a) {\n                        for (var f = a[i].split(sep = sep || \",\"), x = f.length - 1, tl; x >= 0; x--) {\n                            if (f[x].replace(/\"\\s+$/, '\"').charAt(f[x].length - 1) === '\"') {\n                                if ((tl = f[x].replace(/^\\s+\"/, '\"')).length > 1 && tl.charAt(0) === '\"') {\n                                    f[x] = f[x].replace(/^\\s*\"|\"\\s*$/g, '').replace(/\"\"/g, '\"');\n                                } else if (x) {\n                                    f.splice(x - 1, 2, [f[x - 1], f[x]].join(sep));\n                                } else f = f.shift().split(sep).concat(f);\n                            } else f[x].replace(/\"\"/g, '\"');\n                        }\n\n                        a[i] = f;\n                    }\n\n                    return a;\n                }\n\n                issues = CSVParse(importedText, dataSeparator).map(issue => assign({}, {\n                    id: uniqueId(),\n                    title: get(issue, '0', ''),\n                    body: get(issue, '1', ''),\n                }));\n            }\n\n            setDataImportedIssues(issues);\n\n            this.setState({\n                importedText: '',\n            });\n        } catch (error) {\n            setAlertError(error);\n        }\n    }\n\n    onDownloadSample() {\n        const {\n            dataType,\n        } = this.state;\n\n        const sampleMIME = dataType === 'json' ? 'aplication/json' : 'text/csv';\n        const sampleName = `sample.${dataType}`;\n\n        const hiddenElement = document.createElement('a');\n        hiddenElement.style.display = 'none';\n        hiddenElement.href = `data:${sampleMIME};charset=utf-8,${encodeURI(this.generateSample())}`;\n        hiddenElement.download = sampleName;\n        document.body.appendChild(hiddenElement);\n        hiddenElement.click();\n        document.body.removeChild(hiddenElement);\n    }\n\n    generateSample() {\n        const {\n            dataType,\n            dataSeparator,\n        } = this.state;\n\n        const sampleCount = 3;\n        const sampleLines = [];\n\n        for (let index = 1; index <= sampleCount; index++) {\n            if (dataType === 'json') {\n                sampleLines.push(`${\"\\t\"}{\"title\":\"Issue Title ${index}\", \"body\":\"Issue Body ${index}\"}`);\n            } else {\n                sampleLines.push(`\"Issue Title ${index}\"${dataSeparator}\"Issue Body ${index}\"`);\n            }\n        }\n\n        return dataType === 'json'\n            ? `[${\"\\n\"}${sampleLines.join(`,${\"\\n\"}`)}${\"\\n\"}]`\n            : `${sampleLines.join(\"\\n\")}`;\n    }\n\n    renderFormEdit() {\n        const {\n            editingIssue,\n            editingIssueTitle,\n            editingIssueBody,\n        } = this.state;\n\n        if (editingIssue === false) {\n            return null\n        }\n\n        return (\n            <BGICForm\n                buttonResetText=\"Back\"\n                buttonSubmitText=\"Apply Changes\"\n                onFormReset={this.onFormReset}\n                onFormSubmit={this.onFormSubmit}\n            >\n                <BGICFormIssue\n                    issueTitle={editingIssueTitle}\n                    issueBody={editingIssueBody}\n                    onChangeIssueTitle={this.onChangeIssueTitle}\n                    onChangeIssueBody={this.onChangeIssueBody}\n                />\n            </BGICForm>\n        );\n    }\n\n    renderFormImport() {\n        const {\n            editingIssue,\n            issues,\n            dataType,\n            dataSeparator,\n            importMethod,\n            importedText,\n        } = this.state;\n\n        if (editingIssue !== false) {\n            return null;\n        }\n\n        const formProps = issues.length\n            ? {\n                buttonResetText: 'Reset',\n                buttonSubmitText: 'Create Issues',\n                onFormReset: this.onFormReset,\n                onFormSubmit: this.onFormSubmit,\n\n            }\n            : {\n                buttonSubmitText: 'Parse Data',\n                buttonSubmitDisabled: !importedText.length,\n                onFormSubmit: this.onParseImportedText,\n                buttonReset: false,\n            };\n\n        const types = [{\n            value: 'json',\n            label: 'JSON',\n        }, {\n            value: 'csv',\n            label: 'CSV',\n        }];\n\n        const methods = [{\n            value: 'upload',\n            label: 'Upload File',\n        }, {\n            value: 'paste',\n            label: 'Copy & Paste',\n        }];\n\n        const separators = [{\n            value: ',',\n            label: 'Comma',\n        }, {\n            value: ';',\n            label: 'Semicolon',\n        }];\n\n        const formContentOutput = issues.length\n            ? (\n                <BGICIssueList\n                    issues={issues}\n                    buttonDeleteHandler={this.onClickIssueDelete}\n                    buttonEditHandler={this.onClickIssueEdit}\n                    buttonEditVisible\n                    buttonDeleteVisible\n                />\n            )\n            : (\n                <React.Fragment>\n                    <Form.Group as={Row}>\n                        <Form.Label column sm={3}>Data Type</Form.Label>\n                        <Col sm={9}>\n                            {types.map(type => (<Form.Check\n                                type=\"radio\"\n                                name=\"type\"\n                                id={`type-${type.value}`}\n                                key={type.value}\n                                value={type.value}\n                                label={type.label}\n                                onChange={this.onChangeDataType}\n                                checked={dataType === type.value}\n                                inline\n                            />))}\n                        </Col>\n                    </Form.Group>\n                    {dataType === 'csv' && <Form.Group as={Row}>\n                        <Form.Label column sm={3}>Data Separator</Form.Label>\n                        <Col sm={9}>\n                            {separators.map(separator => (<Form.Check\n                                type=\"radio\"\n                                name=\"separator\"\n                                id={`separator-${separator.value}`}\n                                key={separator.value}\n                                value={separator.value}\n                                label={separator.label}\n                                onChange={this.onChangeDataSeparator}\n                                checked={dataSeparator === separator.value}\n                                inline\n                            />))}\n                        </Col>\n                    </Form.Group>}\n                    <Form.Group as={Row}>\n                        <Form.Label column sm={3}>Method</Form.Label>\n                        <Col sm={9}>\n                            {methods.map(method => (<Form.Check\n                                type=\"radio\"\n                                name=\"method\"\n                                id={`method-${method.value}`}\n                                key={method.value}\n                                value={method.value}\n                                label={method.label}\n                                onChange={this.onChangeImportMethod}\n                                checked={importMethod === method.value}\n                                inline\n                            />))}\n                        </Col>\n                    </Form.Group>\n                    {importMethod === 'upload' && <Form.Group as={Row}>\n                        <Form.Label column sm={3}></Form.Label>\n                        <Col sm={9}>\n                            <Form.Control\n                                type=\"file\"\n                                accept={`.${dataType}`}\n                                onChange={this.onChangeUpload}\n                            />\n                            <Button\n                                className=\"p-0 mt-2\"\n                                variant=\"link\"\n                                onClick={this.onDownloadSample}\n                            >\n                                {`Download ${dataType.toUpperCase()} sample`}\n                            </Button>\n                        </Col>\n                    </Form.Group>}\n                    {importMethod === 'paste' && <Form.Group as={Row}>\n                        <Form.Label column sm={3}></Form.Label>\n                        <Col sm={9}>\n                            <Form.Control\n                                as=\"textarea\"\n                                rows=\"10\"\n                                onChange={this.onChangePaste}\n                                placeholder={`Example:${\"\\n\"}${this.generateSample()}`}\n                                value={importedText}\n                            />\n                        </Col>\n                    </Form.Group>}\n                </React.Fragment>\n            );\n\n        return (\n            <BGICForm {...formProps}>\n                {formContentOutput}\n            </BGICForm>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderFormEdit()}\n                {this.renderFormImport()}\n            </React.Fragment>\n        );\n    }\n}\n\nBGICTabMultipleIssue.propTypes = {\n    accessToken: PropTypes.string.isRequired,\n    ownerSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n    repositorySelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n    assigneesSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.array,\n    ]).isRequired,\n    labelsSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.array,\n    ]).isRequired,\n    milestonesSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n};\n\nexport default BGICTabMultipleIssue;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport parseLinkHeader from 'parse-link-header';\n\nimport {\n    isEmpty,\n    isEqual,\n    pick,\n    assign,\n    keys,\n    get,\n} from 'lodash';\n\nimport {\n    apiSearchIssues,\n    apiUpdateIssues,\n} from '../api';\n\nimport {\n    startLoading,\n    stopLoading,\n    setAlertSuccess,\n    setAlertError,\n} from '../helpers/storage';\n\nimport BGICForm from './form';\nimport BGICFormIssue from './form-issue';\nimport BGICIssueList from './issue-list';\n\nclass BGICTabExistingIssue extends PureComponent {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n\n        this.resetProps = {\n            'ownerSelected': false,\n            'repositorySelected': false,\n            'assigneesSelected': [],\n            'labelsSelected': [],\n            'milestonesSelected': false,\n        };\n\n        this.fetchIssuesAfterEdit = false;\n\n        this.state = {\n            editingIssue: false,\n            editingIssueTitle: '',\n            editingIssueBody: '',\n            issues: [],\n            currentPage: 1,\n            totalPages: 1,\n            isFetchingData: false,\n            searchIssuesSort: 'sort:created-desc',\n            searchIssuesStatus: 'is:open',\n            searchIssuesKeyword: '',\n        };\n\n        this.onFormReset = this.onFormReset.bind(this);\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.onChangeIssueTitle = this.onChangeIssueTitle.bind(this);\n        this.onChangeIssueBody = this.onChangeIssueBody.bind(this);\n        this.onClickIssueEdit = this.onClickIssueEdit.bind(this);\n        this.onChangePagination = this.onChangePagination.bind(this);\n        this.onChangeFilter = this.onChangeFilter.bind(this);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        this.fetchIssues({ currentPage: 1 });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (!isEqual(nextProps.repositorySelected, this.props.repositorySelected)) {\n            this.setState({\n                editingIssue: false,\n                editingIssueTitle: '',\n                editingIssueBody: '',\n            });\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const compares = keys(this.resetProps);\n        const editingIssueId = get(this.state, 'editingIssue.id');\n        const editingIssueIdPrev = get(prevState, 'editingIssue.id');\n\n        if (isEqual(editingIssueId, editingIssueIdPrev) && !editingIssueId) {\n            if (this.fetchIssuesAfterEdit) {\n                this.fetchIssuesAfterEdit = false;\n                this.fetchIssues();\n            } else if (!isEqual(pick(prevProps, compares), pick(this.props, compares)) && !isEqual(this.resetProps, pick(this.props, compares))) {\n                this.fetchIssues({ currentPage: 1 });\n            }\n        } else if (!isEqual(editingIssueId, editingIssueIdPrev)) {\n            if (editingIssueId) {\n                this.resetProps = pick(prevProps, compares);\n            } else {\n                this.props.onChangeOwner(this.resetProps.ownerSelected);\n                this.props.onChangeRepository(this.resetProps.repositorySelected);\n                this.props.onChangeAssignees(this.resetProps.assigneesSelected);\n                this.props.onChangeLabels(this.resetProps.labelsSelected);\n                this.props.onChangeMilestones(this.resetProps.milestonesSelected);\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    onFormReset() {\n        this.setState({\n            editingIssue: false,\n            editingIssueTitle: '',\n            editingIssueBody: '',\n        });\n    }\n\n    onFormSubmit() {\n        const {\n            editingIssue,\n            editingIssueTitle,\n            editingIssueBody,\n        } = this.state;\n\n        if (!editingIssue) {\n            return;\n        }\n\n        const {\n            accessToken,\n            repositorySelected,\n            assigneesSelected,\n            labelsSelected,\n            milestonesSelected,\n        } = this.props;\n\n        const issueDataNew = {\n            number: editingIssue.number,\n            title: editingIssueTitle,\n            body: editingIssueBody,\n            assignees: assigneesSelected ? assigneesSelected.map(assignee => assignee.login) : [],\n            labels: labelsSelected ? labelsSelected.map(label => label.name) : [],\n            milestone: milestonesSelected ? milestonesSelected.number : null,\n        };\n\n        const issueDataOld = {\n            number: editingIssue.number,\n            title: editingIssue.title,\n            body: editingIssue.body,\n            assignees: editingIssue.assignees ? editingIssue.assignees.map(assignee => assignee.login) : [],\n            labels: editingIssue.labels ? editingIssue.labels.map(label => label.name) : [],\n            milestone: editingIssue.milestone ? editingIssue.milestone.number : null,\n        };\n\n        if (isEqual(issueDataNew, issueDataOld)) {\n            return setAlertError('No changes have been made');\n        }\n\n        startLoading();\n\n        apiUpdateIssues(issueDataNew, repositorySelected.full_name, accessToken)\n            .then((responses) => {\n                if (this._isMounted) {\n                    setAlertSuccess(responses.map(response => assign({}, {\n                        message: 'Issue %link% has been successfully edited',\n                        linkUrl: response.data.html_url,\n                        linkAnchor: `#${response.data.number}`,\n                    })));\n\n                    this.fetchIssuesAfterEdit = true;\n\n                    this.setState({\n                        editingIssue: responses[0].data,\n                    });\n                }\n            }).catch((error) => {\n                if (this._isMounted) {\n                    setAlertError(error);\n                }\n            }).finally(() => {\n                if (this._isMounted) {\n                    stopLoading();\n                }\n            });\n    }\n\n    onChangeIssueTitle(editingIssueTitle) {\n        this.setState({\n            editingIssueTitle,\n        });\n    }\n\n    onChangeIssueBody(editingIssueBody) {\n        this.setState({\n            editingIssueBody,\n        });\n    }\n\n    onClickIssueEdit(editingIssue) {\n        if (!editingIssue) {\n            return;\n        }\n\n        const {\n            title,\n            body,\n        } = editingIssue;\n\n        this.setState({\n            editingIssueTitle: title,\n            editingIssueBody: body,\n            editingIssue,\n        });\n\n        this.props.onChangeAssignees(editingIssue.assignees);\n        this.props.onChangeLabels(editingIssue.labels);\n        this.props.onChangeMilestones(editingIssue.milestone);\n    }\n\n    onChangePagination(page) {\n        const {\n            currentPage,\n            totalPages,\n        } = this.state;\n\n        if (!page || page > totalPages || page < 1 || page === currentPage) {\n            return;\n        }\n\n        this.setState({\n            currentPage: page,\n        });\n\n        this.fetchIssues({\n            currentPage: page,\n        });\n    }\n\n    onChangeFilter(name, value) {\n        this.setState({\n            [`${name}`]: value,\n        });\n\n        const currentPage = name === 'searchIssuesSort' ? this.state.currentPage : 1;\n\n        this.fetchIssues({\n            [`${name}`]: value,\n            currentPage,\n        });\n    }\n\n    fetchIssues(params = {}) {\n        const {\n            accessToken,\n            ownerSelected,\n        } = this.props;\n\n\n        if (!ownerSelected) {\n            return;\n        }\n\n        const {\n            isFetchingData,\n        } = this.state;\n\n        if (!isFetchingData) {\n            this.setState({\n                isFetchingData: true,\n            });\n        }\n\n        apiSearchIssues(this.getFetchIssuesQuery(params), accessToken)\n            .then((response) => {\n                if (this._isMounted) {\n                    const newState = {\n                        isFetchingData: false,\n                        issues: response.data.items,\n                    };\n\n                    const linkHeader = parseLinkHeader(response.headers.link);\n\n                    if (linkHeader && linkHeader.last) {\n                        newState.totalPages = parseInt(linkHeader.last.page);\n                    } else if (linkHeader && linkHeader.prev) {\n                        newState.totalPages = parseInt(linkHeader.prev.page) + 1;\n                    } else {\n                        newState.totalPages = 1;\n                    }\n\n                    this.setState(assign({}, newState, params));\n                }\n            }).catch((error) => {\n                if (this._isMounted) {\n                    this.setState({\n                        isFetchingData: false,\n                        issues: error,\n                        totalPages: 1,\n                        currentPage: 1,\n                    });\n                }\n            });\n    }\n\n    getFetchIssuesQuery(params = {}) {\n        const {\n            ownerSelected,\n            repositorySelected,\n            assigneesSelected,\n            labelsSelected,\n            milestonesSelected,\n        } = this.props;\n\n        const queries = ['type:issue'];\n\n        if (repositorySelected) {\n            queries.push(`repo:${repositorySelected.full_name}`);\n        } else if (ownerSelected) {\n            queries.push(`${ownerSelected.type}:${ownerSelected.login}`);\n        }\n\n        if (assigneesSelected && assigneesSelected.length) {\n            queries.push(...assigneesSelected.map(assignee => {\n                if (assignee.login.indexOf(' ') === -1) {\n                    return `assignee:${assignee.login}`;\n                }\n\n                return `assignee:\"${assignee.login}\"`;\n            }));\n        }\n\n        if (labelsSelected && labelsSelected.length) {\n            queries.push(...labelsSelected.map(label => {\n                if (label.name.indexOf(' ') === -1) {\n                    return `label:${label.name}`;\n                }\n\n                return `label:\"${label.name}\"`;\n            }));\n        }\n\n        if (milestonesSelected) {\n            queries.push(`milestone:\"${milestonesSelected.title}\"`);\n        }\n\n        const searchIssuesSort = params.searchIssuesSort || this.state.searchIssuesSort;\n        if (searchIssuesSort) {\n            queries.push(searchIssuesSort);\n        }\n\n        const searchIssuesStatus = params.searchIssuesStatus || this.state.searchIssuesStatus;\n        if (searchIssuesStatus) {\n            queries.push(searchIssuesStatus);\n        }\n\n        const searchIssuesKeyword = params.searchIssuesKeyword || this.state.searchIssuesKeyword;\n        if (searchIssuesKeyword) {\n            if (searchIssuesKeyword.indexOf(' ') === -1) {\n                queries.push(searchIssuesKeyword);\n            } else {\n                queries.push(`\"${searchIssuesKeyword}\"`);\n            }\n        }\n\n        const currentPage = params.currentPage || this.state.currentPage;\n\n        return {\n            page: currentPage,\n            q: queries.map(query => query.trim()).filter(query => !isEmpty(query)).join(' '),\n        };\n    }\n\n    renderFormEdit() {\n        const {\n            editingIssue,\n            editingIssueTitle,\n            editingIssueBody,\n        } = this.state;\n\n        if (!editingIssue) {\n            return null;\n        }\n\n        return (\n            <BGICForm\n                buttonResetText=\"Back\"\n                buttonSubmitText=\"Save Changes\"\n                onFormReset={this.onFormReset}\n                onFormSubmit={this.onFormSubmit}\n            >\n                <BGICFormIssue\n                    issueTitle={editingIssueTitle}\n                    issueBody={editingIssueBody}\n                    onChangeIssueTitle={this.onChangeIssueTitle}\n                    onChangeIssueBody={this.onChangeIssueBody}\n                />\n            </BGICForm>\n        );\n    }\n\n    renderIssuesList() {\n        const {\n            editingIssue,\n            issues,\n            currentPage,\n            totalPages,\n            isFetchingData,\n            searchIssuesSort,\n            searchIssuesStatus,\n            searchIssuesKeyword,\n        } = this.state;\n\n        if (editingIssue) {\n            return null\n        }\n\n        const {\n            ownerSelected,\n            repositorySelected,\n        } = this.props;\n\n        const getIssues = () => {\n            if (!ownerSelected) {\n                return new Error('No user or organization selected');\n            }\n\n            return issues;\n        };\n\n        const filterParams = {\n            searchIssuesSort,\n            searchIssuesStatus,\n            searchIssuesKeyword,\n        };\n\n        return (\n            <BGICIssueList\n                isFetchingData={isFetchingData}\n                issues={getIssues()}\n                currentPage={currentPage}\n                totalPages={totalPages}\n                onChangePagination={this.onChangePagination}\n                filterParams={filterParams}\n                onChangeFilterParams={this.onChangeFilter}\n                buttonEditVisible={!isEmpty(repositorySelected)}\n                buttonEditHandler={this.onClickIssueEdit}\n                buttonViewVisible\n            />\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderFormEdit()}\n                {this.renderIssuesList()}\n            </React.Fragment>\n        );\n    }\n}\n\nBGICTabExistingIssue.propTypes = {\n    accessToken: PropTypes.string.isRequired,\n    ownerSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n    repositorySelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n    assigneesSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.array,\n    ]).isRequired,\n    labelsSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.array,\n    ]).isRequired,\n    milestonesSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n    onChangeOwner: PropTypes.func.isRequired,\n    onChangeRepository: PropTypes.func.isRequired,\n    onChangeAssignees: PropTypes.func.isRequired,\n    onChangeLabels: PropTypes.func.isRequired,\n    onChangeMilestones: PropTypes.func.isRequired,\n};\n\nexport default BGICTabExistingIssue;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport Creatable from 'react-select/creatable';\n\nimport {\n    get,\n    assign,\n    isEqual,\n    isEmpty,\n} from 'lodash';\n\nimport {\n    Form,\n} from 'react-bootstrap';\n\nimport {\n    getDataFetchedStatus,\n    setDataFetchedStatus,\n    setDataOwners,\n    getDataOwners,\n    setDataRepositories,\n    getDataRepositories,\n    setDataAssignees,\n    getDataAssignees,\n    setDataLabels,\n    getDataLabels,\n    setDataMilestones,\n    getDataMilestones,\n} from '../helpers/storage';\n\nimport {\n    apiFetchOwners,\n    apiFetchRepsitories,\n    apiFetchAssignees,\n    apiFetchLabels,\n    apiCreateLabels,\n    apiFetchMilestones,\n    apiCreateMilestones,\n} from '../api';\n\nclass BGICSidebar extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ownersListLodingState: false,\n            repositoriesListLodingState: false,\n            assigneesListLodingState: false,\n            labelsListLodingState: false,\n        };\n\n        this.onFocusOwnersList = this.onFocusOwnersList.bind(this);\n        this.onFocusRepositoriesList = this.onFocusRepositoriesList.bind(this);\n        this.onFocusAssigneesList = this.onFocusAssigneesList.bind(this);\n        this.onFocusLabelsList = this.onFocusLabelsList.bind(this);\n        this.onFocusMilestonesList = this.onFocusMilestonesList.bind(this);\n\n        this.onChangeOwnersList = this.onChangeOwnersList.bind(this);\n        this.onChangeRepositoriesList = this.onChangeRepositoriesList.bind(this);\n        this.onChangeAssigneesList = this.onChangeAssigneesList.bind(this);\n        this.onChangeLabelsList = this.onChangeLabelsList.bind(this);\n        this.onChangeMilestonesList = this.onChangeMilestonesList.bind(this);\n    }\n\n    onFocusOwnersList() {\n        if (getDataFetchedStatus('ownersList')) {\n            return;\n        }\n\n        this.startLoading('ownersList');\n\n        apiFetchOwners(this.props.accessToken)\n            .then((results) => {\n                setDataOwners(results);\n                setDataFetchedStatus('ownersList', true);\n\n                this.stopLoading('ownersList');\n            })\n            .catch(() => {\n                this.stopLoading('ownersList');\n            });\n    }\n\n    onFocusRepositoriesList() {\n        const {\n            accessToken,\n            ownerSelected,\n        } = this.props;\n\n        if (!ownerSelected || getDataFetchedStatus(`repositoriesList.${ownerSelected.id}`)) {\n            return;\n        }\n\n        this.startLoading('repositoriesList');\n\n        apiFetchRepsitories(ownerSelected, accessToken)\n            .then((results) => {\n                setDataRepositories(results);\n\n                setDataFetchedStatus(`repositoriesList.${ownerSelected.id}`, true);\n\n                this.stopLoading('repositoriesList');\n            })\n            .catch(() => {\n                this.stopLoading('repositoriesList');\n            });\n    }\n\n    onFocusAssigneesList() {\n        const {\n            accessToken,\n            ownerSelected,\n        } = this.props;\n\n        if (!ownerSelected || getDataFetchedStatus(`assigneesList.${ownerSelected.id}`) || ownerSelected.type === 'user') {\n            return;\n        }\n\n        this.startLoading('assigneesList');\n\n        apiFetchAssignees(ownerSelected, accessToken)\n            .then((results) => {\n                setDataAssignees(results);\n\n                setDataFetchedStatus(`assigneesList.${ownerSelected.id}`, true);\n\n                this.stopLoading('assigneesList');\n            })\n            .catch(() => {\n                this.stopLoading('assigneesList');\n            });\n    }\n\n    onFocusLabelsList() {\n        const {\n            accessToken,\n            repositorySelected,\n        } = this.props;\n\n        if (!repositorySelected || getDataFetchedStatus(`labelsList.${repositorySelected.id}`)) {\n            return;\n        }\n\n        this.startLoading('labelsList');\n\n        apiFetchLabels(repositorySelected, accessToken)\n            .then((results) => {\n                setDataLabels(results);\n\n                setDataFetchedStatus(`labelsList.${repositorySelected.id}`, true);\n\n                this.stopLoading('labelsList');\n            })\n            .catch(() => {\n                this.stopLoading('labelsList');\n            });\n    }\n\n    onFocusMilestonesList() {\n        const {\n            accessToken,\n            repositorySelected,\n        } = this.props;\n\n        if (!repositorySelected || getDataFetchedStatus(`milestonesList.${repositorySelected.id}`)) {\n            return;\n        }\n\n        this.startLoading('milestonesList');\n\n        apiFetchMilestones(repositorySelected, accessToken)\n            .then((results) => {\n                setDataMilestones(results);\n\n                setDataFetchedStatus(`milestonesList.${repositorySelected.id}`, true);\n\n                this.stopLoading('milestonesList');\n            })\n            .catch(() => {\n                this.stopLoading('milestonesList');\n            });\n    }\n\n    onChangeOwnersList(newValue) {\n        if (this.isLoading('ownersList')) {\n            return;\n        }\n\n        const {\n            ownerSelected,\n            onChangeOwner,\n        } = this.props;\n\n        if (isEqual(newValue, ownerSelected) || !onChangeOwner) {\n            return;\n        }\n\n        onChangeOwner(newValue);\n    }\n\n    onChangeRepositoriesList(newValue) {\n        if (this.isLoading('repositoriesList')) {\n            return;\n        }\n\n        const {\n            repositorySelected,\n            onChangeRepository,\n        } = this.props;\n\n        if (isEqual(newValue, repositorySelected) || !onChangeRepository) {\n            return;\n        }\n\n        onChangeRepository(newValue);\n    }\n\n    onChangeAssigneesList(newValue) {\n        if (this.isLoading('assigneesList')) {\n            return;\n        }\n\n        const {\n            assigneesSelected,\n            onChangeAssignees,\n        } = this.props;\n\n        if (isEqual(newValue, assigneesSelected) || !onChangeAssignees) {\n            return;\n        }\n\n        onChangeAssignees(newValue);\n    }\n\n    onChangeLabelsList(newValue) {\n        if (this.isLoading('labelsList')) {\n            return;\n        }\n\n        const {\n            repositorySelected,\n            labelsSelected,\n            onChangeLabels,\n            accessToken,\n        } = this.props;\n\n        if (isEqual(newValue, labelsSelected) || !onChangeLabels) {\n            return;\n        }\n\n        onChangeLabels(newValue);\n\n        const newLabels = newValue ? newValue.filter(label => label.__isNew__).map(label => assign({}, label, {\n            name: label.value,\n        })) : [];\n\n        if (repositorySelected && newLabels.length) {\n            this.startLoading('labelsList');\n\n            apiCreateLabels(newLabels, repositorySelected, accessToken)\n                .then((results) => {\n                    setDataLabels(results);\n\n                    if (onChangeLabels) {\n                        onChangeLabels([...newValue.filter(label => !label.__isNew__), ...results]);\n                    }\n\n                    this.stopLoading('labelsList');\n                })\n                .catch(() => {\n                    this.stopLoading('labelsList');\n                });\n        }\n    }\n\n    onChangeMilestonesList(newValue) {\n        if (this.isLoading('milestonesList')) {\n            return;\n        }\n\n        const {\n            repositorySelected,\n            milestonesSelected,\n            onChangeMilestones,\n            accessToken,\n        } = this.props;\n\n        if (isEqual(newValue, milestonesSelected) || !onChangeMilestones) {\n            return;\n        }\n\n        onChangeMilestones(newValue);\n\n        if (repositorySelected && newValue && newValue.__isNew__) {\n            this.startLoading('milestonesList');\n\n            apiCreateMilestones({ title: newValue.value }, repositorySelected, accessToken)\n                .then((results) => {\n                    setDataMilestones(results);\n\n                    if (onChangeMilestones && results && results.length) {\n                        onChangeMilestones(results[0]);\n                    }\n\n                    this.stopLoading('milestonesList');\n                })\n                .catch(() => {\n                    this.stopLoading('milestonesList');\n                });\n        }\n    }\n\n    startLoading(name) {\n        this.setState({\n            [`${name}LoadingState`]: true,\n        });\n    }\n\n    stopLoading(name) {\n        this.setState({\n            [`${name}LoadingState`]: false,\n        });\n    }\n\n    isLoading(name) {\n        return get(this.state, `${name}LoadingState`, false);\n    }\n\n    getOptions(type) {\n        const {\n            currentUser,\n            ownerSelected,\n            repositorySelected,\n        } = this.props;\n\n        switch (type) {\n            case 'ownersList': {\n                const options = getDataOwners();\n\n                if (!currentUser) {\n                    return options;\n                }\n\n                return [assign({}, currentUser, {\n                    type: 'user',\n                }), ...options];\n            }\n\n            case 'repositoriesList': {\n                if (!ownerSelected) {\n                    return [];\n                }\n\n                return getDataRepositories(ownerSelected.login);\n            }\n\n            case 'assigneesList': {\n                if (!ownerSelected) {\n                    return [];\n                }\n\n                return [currentUser, ...getDataAssignees(ownerSelected.login).filter(user => user.login !== currentUser.login)];\n            }\n\n            case 'labelsList': {\n                if (!repositorySelected) {\n                    return [];\n                }\n\n                return getDataLabels(repositorySelected.full_name);\n            }\n\n            case 'milestonesList': {\n                if (!repositorySelected) {\n                    return [];\n                }\n\n                return getDataMilestones(repositorySelected.full_name);\n            }\n\n            default:\n                return [];\n        }\n    }\n\n    renderOwnersList() {\n        return (\n            <Form.Group>\n                <Form.Label>User or Organization</Form.Label>\n                <Select\n                    placeholder=\"Select User or Organization\"\n                    options={this.getOptions('ownersList')}\n                    value={this.props.ownerSelected}\n                    onChange={this.onChangeOwnersList}\n                    onFocus={this.onFocusOwnersList}\n                    getOptionLabel={option => option.login}\n                    getOptionValue={option => option.login}\n                    isLoading={this.isLoading('ownersList')}\n                    isSearchable\n                    isClearable\n                />\n            </Form.Group>\n        );\n    }\n\n    renderRepositoriesList() {\n        const {\n            ownerSelected,\n            repositorySelected,\n        } = this.props;\n\n        return (\n            <Form.Group>\n                <Form.Label>Repository</Form.Label>\n                <Select\n                    placeholder=\"Select Repository\"\n                    options={this.getOptions('repositoriesList')}\n                    value={repositorySelected}\n                    onChange={this.onChangeRepositoriesList}\n                    onFocus={this.onFocusRepositoriesList}\n                    getOptionLabel={option => option.name}\n                    getOptionValue={option => option.full_name}\n                    isLoading={this.isLoading('repositoriesList')}\n                    isSearchable={!isEmpty(ownerSelected)}\n                    isClearable\n                />\n            </Form.Group>\n        );\n    }\n\n    renderAssigneesList() {\n        const {\n            ownerSelected,\n            assigneesSelected,\n        } = this.props;\n\n        return (\n            <Form.Group>\n                <Form.Label>Assignees</Form.Label>\n                <Select\n                    placeholder=\"Select Assignees\"\n                    options={this.getOptions('assigneesList')}\n                    value={assigneesSelected}\n                    onChange={this.onChangeAssigneesList}\n                    onFocus={this.onFocusAssigneesList}\n                    getOptionLabel={option => option.login}\n                    getOptionValue={option => option.login}\n                    isLoading={this.isLoading('assigneesList')}\n                    isSearchable={!isEmpty(ownerSelected)}\n                    isClearable\n                    isMulti\n                />\n            </Form.Group>\n        );\n    }\n\n    renderLabelsList() {\n        const {\n            repositorySelected,\n            labelsSelected,\n        } = this.props;\n\n        return (\n            <Form.Group>\n                <Form.Label>Labels</Form.Label>\n                <Creatable\n                    placeholder=\"Select Labels\"\n                    options={this.getOptions('labelsList')}\n                    value={labelsSelected}\n                    onChange={this.onChangeLabelsList}\n                    onFocus={this.onFocusLabelsList}\n                    getOptionLabel={option => option.name}\n                    getOptionValue={option => option.name}\n                    getNewOptionData={inputValue => assign({}, { __isNew__: true, name: inputValue, label: inputValue, value: inputValue })}\n                    formatCreateLabel={inputValue => `+ \"${inputValue}\"`}\n                    isValidNewOption={inputValue => inputValue && repositorySelected}\n                    isLoading={this.isLoading('labelsList')}\n                    isSearchable={!isEmpty(repositorySelected)}\n                    isClearable\n                    isMulti\n                />\n            </Form.Group>\n        );\n    }\n\n    renderMilestonesList() {\n        const {\n            repositorySelected,\n            milestonesSelected,\n        } = this.props;\n\n        return (\n            <Form.Group>\n                <Form.Label>Milestone</Form.Label>\n                <Creatable\n                    placeholder='Select Milestone'\n                    options={this.getOptions('milestonesList')}\n                    value={milestonesSelected}\n                    onChange={this.onChangeMilestonesList}\n                    onFocus={this.onFocusMilestonesList}\n                    getOptionLabel={option => option.title}\n                    getOptionValue={option => option.number}\n                    getNewOptionData={inputValue => assign({}, { __isNew__: true, title: inputValue, label: inputValue, value: inputValue })}\n                    formatCreateLabel={inputValue => `+ \"${inputValue}\"`}\n                    isValidNewOption={inputValue => inputValue && repositorySelected}\n                    isLoading={this.isLoading('milestonesList')}\n                    isSearchable={!isEmpty(repositorySelected)}\n                    isClearable\n                />\n            </Form.Group>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderOwnersList()}\n                {this.renderRepositoriesList()}\n                {this.renderAssigneesList()}\n                {this.renderLabelsList()}\n                {this.renderMilestonesList()}\n            </React.Fragment>\n        );\n    }\n}\n\nBGICSidebar.propTypes = {\n    accessToken: PropTypes.string.isRequired,\n    currentUser: PropTypes.object.isRequired,\n    ownerSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n    repositorySelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n    assigneesSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.array,\n    ]).isRequired,\n    labelsSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.array,\n    ]).isRequired,\n    milestonesSelected: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.object,\n    ]).isRequired,\n    onChangeOwner: PropTypes.func.isRequired,\n    onChangeRepository: PropTypes.func.isRequired,\n    onChangeAssignees: PropTypes.func.isRequired,\n    onChangeLabels: PropTypes.func.isRequired,\n    onChangeMilestones: PropTypes.func.isRequired,\n};\n\nexport default BGICSidebar;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    assign,\n    isEqual,\n    isNull,\n} from 'lodash';\n\nimport {\n    Tabs,\n    Tab,\n    Container,\n    Row,\n    Col,\n} from 'react-bootstrap';\n\nimport BGICTabSingleIssue from './tab-single-issue';\nimport BGICTabMultipleIssue from './tab-multiple-issue';\nimport BGICTabExistingIssue from './tab-existing-issue';\nimport BGICSidebar from './sidebar';\n\nclass BGICPageUserDashboard extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeTab: 'single',\n            ownerSelected: false,\n            repositorySelected: false,\n            assigneesSelected: false,\n            labelsSelected: false,\n            milestonesSelected: false,\n        };\n\n        this.onSelectTab = this.onSelectTab.bind(this);\n        this.onChangeOwner = this.onChangeOwner.bind(this);\n        this.onChangeRepository = this.onChangeRepository.bind(this);\n        this.onChangeAssignees = this.onChangeAssignees.bind(this);\n        this.onChangeLabels = this.onChangeLabels.bind(this);\n        this.onChangeMilestones = this.onChangeMilestones.bind(this);\n    }\n\n    onSelectTab(key) {\n        this.setState({\n            activeTab: key,\n        });\n    }\n\n    onChangeOwner(ownerSelected) {\n        if (isEqual(ownerSelected, this.state.ownerSelected)) {\n            return;\n        }\n\n        this.setState({\n            ownerSelected: isNull(ownerSelected) ? false : ownerSelected,\n            repositorySelected: false,\n            assigneesSelected: false,\n            labelsSelected: false,\n            milestonesSelected: false,\n        });\n    }\n\n    onChangeRepository(repositorySelected) {\n        if (isEqual(repositorySelected, this.state.repositorySelected)) {\n            return;\n        }\n\n        this.setState({\n            repositorySelected: isNull(repositorySelected) ? false : repositorySelected,\n            labelsSelected: false,\n            milestonesSelected: false,\n        });\n    }\n\n    onChangeAssignees(assigneesSelected) {\n        if (isEqual(assigneesSelected, this.state.assigneesSelected)) {\n            return;\n        }\n\n        this.setState({\n            assigneesSelected: isNull(assigneesSelected) ? false : assigneesSelected,\n        });\n    }\n\n    onChangeLabels(labelsSelected) {\n        if (isEqual(labelsSelected, this.state.labelsSelected)) {\n            return;\n        }\n\n        this.setState({\n            labelsSelected: isNull(labelsSelected) ? false : labelsSelected,\n        });\n    }\n\n    onChangeMilestones(milestonesSelected) {\n        if (isEqual(milestonesSelected, this.state.milestonesSelected)) {\n            return;\n        }\n\n        this.setState({\n            milestonesSelected: isNull(milestonesSelected) ? false : milestonesSelected,\n        });\n    }\n\n    renderSideBar() {\n        return (\n            <BGICSidebar\n                accessToken={this.props.accessToken}\n                currentUser={this.props.currentUser}\n                ownerSelected={this.state.ownerSelected}\n                repositorySelected={this.state.repositorySelected}\n                assigneesSelected={this.state.assigneesSelected}\n                labelsSelected={this.state.labelsSelected}\n                milestonesSelected={this.state.milestonesSelected}\n                onChangeOwner={this.onChangeOwner}\n                onChangeRepository={this.onChangeRepository}\n                onChangeAssignees={this.onChangeAssignees}\n                onChangeLabels={this.onChangeLabels}\n                onChangeMilestones={this.onChangeMilestones}\n                activeTab={this.state.activeTab}\n            />\n        );\n    }\n\n    renderContent() {\n        const {\n            accessToken\n        } = this.props;\n\n        const {\n            ownerSelected,\n            repositorySelected,\n            assigneesSelected,\n            labelsSelected,\n            milestonesSelected,\n        } = this.state;\n\n        const tabProps = {\n            accessToken,\n            ownerSelected: ownerSelected,\n            repositorySelected: repositorySelected,\n            assigneesSelected: assigneesSelected,\n            labelsSelected: labelsSelected,\n            milestonesSelected: milestonesSelected,\n        };\n\n        if (milestonesSelected) {\n            tabProps.milestone = milestonesSelected.number;\n        }\n\n        const tabs = [{\n            eventKey: 'single',\n            title: 'Create Single Issue',\n            content: BGICTabSingleIssue,\n            props: tabProps,\n        }, {\n            eventKey: 'imported',\n            title: 'Import Multiple Issue',\n            content: BGICTabMultipleIssue,\n            props: tabProps,\n        }, {\n            eventKey: 'created',\n            title: 'Created Issues',\n            content: BGICTabExistingIssue,\n            props: assign({}, tabProps, {\n                onChangeOwner: this.onChangeOwner,\n                onChangeRepository: this.onChangeRepository,\n                onChangeAssignees: this.onChangeAssignees,\n                onChangeLabels: this.onChangeLabels,\n                onChangeMilestones: this.onChangeMilestones,\n            }),\n        }];\n\n        return (\n            <Tabs defaultActiveKey=\"single\" onSelect={this.onSelectTab}>\n                {\n                    tabs.map((tab) => {\n                        return (\n                            <Tab\n                                key={tab.eventKey}\n                                eventKey={tab.eventKey}\n                                title={tab.title}\n                                className=\"border-right border-bottom border-left p-4 rounded\"\n                            >\n                                {this.state.activeTab === tab.eventKey && React.createElement(\n                                    tab.content,\n                                    assign({}, tab.props, {\n                                        tabKey: tab.eventKey,\n                                        activeTabKey: this.state.activeTab,\n                                    })\n                                )}\n                            </Tab>\n                        )\n                    })\n                }\n            </Tabs>\n        );\n    }\n\n    render() {\n        return (\n            <Container className=\"mt-5\">\n                <Row>\n                    <Col xs={12} md={8} className=\"mb-3\">\n                        {this.renderContent()}\n                    </Col>\n                    <Col xs={12} md={4} className=\"mb-3\">\n                        {this.renderSideBar()}\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nBGICPageUserDashboard.propTypes = {\n    accessToken: PropTypes.string.isRequired,\n    currentUser: PropTypes.object.isRequired,\n};\n\nexport default BGICPageUserDashboard;\n","import React, { PureComponent } from 'react';\n\nimport 'bootstrap/scss/bootstrap.scss';\n\nimport {\n  getAuthentication,\n  setAuthentication,\n  removeAuthentication,\n  clearData,\n} from './helpers/storage';\n\nimport BGICNavbar from './components/navbar';\nimport BGICPageWelcome from './components/page-welcome';\nimport BGICPageUserDashboard from './components/page-dashboard';\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    const authentication = getAuthentication();\n\n    this.state = {\n      accessToken: authentication ? authentication.accessToken : '',\n      currentUser: authentication ? authentication.currentUser : false,\n    }\n\n    this.onUserLogin = this.onUserLogin.bind(this);\n    this.onUserLogout = this.onUserLogout.bind(this);\n  }\n\n  onUserLogin(accessToken, currentUser) {\n    clearData();\n    setAuthentication(accessToken, currentUser);\n\n    this.setState({\n      accessToken,\n      currentUser,\n    });\n  }\n\n  onUserLogout() {\n    removeAuthentication();\n    clearData();\n\n    this.setState({\n      accessToken: '',\n      currentUser: false,\n    });\n  }\n\n  renderNavbar() {\n    return (<BGICNavbar\n      currentUser={this.state.currentUser}\n      onUserLogin={this.onUserLogin}\n      onUserLogout={this.onUserLogout}\n    />);\n  }\n\n  renderPageWelcome() {\n    const {\n      accessToken,\n      currentUser,\n    } = this.state;\n\n    if (accessToken || currentUser) {\n      return null;\n    }\n\n    return <BGICPageWelcome />;\n  }\n\n  renderPageDashboard() {\n    const {\n      accessToken,\n      currentUser,\n    } = this.state;\n\n    if (!accessToken || !currentUser) {\n      return null;\n    }\n\n    return (\n      <BGICPageUserDashboard\n        accessToken={accessToken}\n        currentUser={currentUser}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.renderNavbar()}\n        {this.renderPageWelcome()}\n        {this.renderPageDashboard()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}